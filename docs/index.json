[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "js/BaseTree.js",
    "content": "import d3 from './CustomD3';\r\nimport NodeSettings from './NodeSettings';\r\nimport LoadOnDemandSettings from './LoadOnDemandSettings';\r\n\r\n/**\r\n * Recursively find a particular object within a hierarchical dataset.\r\n * \r\n * @param {object} hierarchicalObject The initial hierarchical object to start the recursive find.\r\n * @param {function} getChildren The callback function that gets the children items of the hierarchical object.\r\n * @param {function} findCondition The callback function that defines whether the object matches the condition to be returned or not.\r\n * @returns {object|null} The first object matching the conditions.\r\n */\r\nfunction recursiveFind(hierarchicalObject, getChildren, findCondition) {\r\n    if (findCondition(hierarchicalObject))\r\n        return hierarchicalObject;\r\n    var children = getChildren(hierarchicalObject);\r\n    var foundNode = children.find(findCondition);\r\n    if (!foundNode)\r\n    {\r\n        for (var child of children) {\r\n            foundNode = recursiveFind(child, getChildren, findCondition);\r\n            if (foundNode)\r\n                break;\r\n        }\r\n    }\r\n    return foundNode;\r\n}\r\n\r\n/**\r\n * Recursively gets a set of objects within a hierarchical dataset.\r\n * \r\n * @param {object} hierarchicalObject The initial hierarchical object to start the recursive get.\r\n * @param {function} getChildren The callback function that gets the children items of the hierarchical object.\r\n */\r\nfunction recursiveGet(hierarchicalObject, getChildren) {\r\n    var allItems = [];\r\n    var children = getChildren(hierarchicalObject);\r\n    if (children)\r\n    {\r\n        for (var child of children) {\r\n            allItems.push(child);\r\n            var descendants = recursiveGet(child, getChildren);\r\n            if (descendants)\r\n                allItems = [...allItems, ...descendants];\r\n        }\r\n    }\r\n    return allItems;\r\n}\r\n\r\nclass BaseTree {\r\n    /**\r\n     * @param {object} options The options object.\r\n     * @param {string} [options.theme=default] The theme of the tree.\r\n     * @param {string} [options.orientation=leftToRight] The orientation of the tree.\r\n     * @param {boolean} [options.allowPan=true] Enables/disables the mouse drag to pan feature.\r\n     * @param {boolean} [options.allowZoom=true] Enables/disables the mouse wheel to zoom feature.\r\n     * @param {boolean} [options.allowFocus=true] If true, clicking on a node would focus to the node, hiding all irrelevant nodes that's not a parent, ancestor, or sibling.\r\n     * @param {boolean} [options.allowNodeCentering=true] If true, clicking on a node would pan to the node.\r\n     * @param {number} [options.minScale=1] Minimum zoom scaling.\r\n     * @param {number} [options.maxScale=2] Maximum zoom scaling.\r\n     * @param {number} [options.nodeDepthMultiplier=300] The distance between the parent and child nodes.\r\n     * @param {boolean} [options.isFlatData=false] Indicates whether the passed data was a flat array of objects. If true, you must specify the `getParentId` option.\r\n     * @param {getIdCallBack} options.getId\r\n     * @param {getParentIdCallBack} [options.getParentId]\r\n     * @param {getChildrenCallBack} [options.getChildren]\r\n     * @param {number} [options.widthWithoutMargins=960] The width of the tree, not including the margins.\r\n     * @param {number} [options.heightWithoutMargins=800] The height of the tree, not including the margins.\r\n     * @param {object} [options.margins] Object specifying the margins of the tree diagram.\r\n     * @param {number} [options.margins.top] The top margin for the tree diagram.\r\n     * @param {number} [options.margins.right] The right margin for the tree diagram.\r\n     * @param {number} [options.margins.bottom] The bottom margin for the tree diagram.\r\n     * @param {number} [options.margins.left] The left margin for the tree diagram.\r\n     * @param {number} [options.duration] Integer in milliseconds determining the duration of the animations for the tree.\r\n     * @param {object} [options.events] Object specifying the events for the tree.\r\n     * @param {nodeClickCallBack} [options.events.nodeClick]\r\n     * @param {LoadOnDemandSettings} [options.loadOnDemandSettings] Object specifying the load-on-demand settings.\r\n     * @param {NodeSettings} [options.nodeSettings] Object specifying the node settings for the tree.\r\n     */\r\n    constructor(options) {\r\n        options = options || {}; // Defaults options to an empty object\r\n\r\n        var mergedOptions = {\r\n            ...BaseTree.defaults,\r\n            ...options\r\n        };\r\n\r\n        // We define our prototype properties which would be set later\r\n        this._root = null;\r\n        this._svg = null;\r\n        this._panningContainer = null,\r\n        this._view = null;\r\n        this._treeGenerator = null;\r\n        this._linkPathGenerator = null;\r\n        this._visibleNodes = null;\r\n        this._links = null;\r\n        this._zoomListener = null,\r\n\r\n        // Assign/Set prototype properties, using values passed from the options object\r\n        this.setTheme(mergedOptions.theme);\r\n        this.setOrientation(mergedOptions.orientation);\r\n        this.setData(mergedOptions.data);\r\n        this.setElement(mergedOptions.element);\r\n        this.setWidthWithoutMargins(mergedOptions.widthWithoutMargins);\r\n        this.setHeightWithoutMargins(mergedOptions.heightWithoutMargins);\r\n        this.setMargins(mergedOptions.margins);\r\n        this.setDuration(mergedOptions.duration);\r\n        this.setAllowPan(mergedOptions.allowPan);\r\n        this.setAllowZoom(mergedOptions.allowZoom);\r\n        this.setAllowFocus(mergedOptions.allowFocus);\r\n        this.setAllowNodeCentering(mergedOptions.allowNodeCentering);\r\n        this.setMinScale(mergedOptions.minScale);\r\n        this.setMaxScale(mergedOptions.maxScale);\r\n        this.setIsFlatData(mergedOptions.isFlatData);\r\n        this.setNodeDepthMultiplier(mergedOptions.nodeDepthMultiplier)\r\n\r\n        // We define our events\r\n        if (mergedOptions.events.nodeClick)\r\n            this.onNodeClick = mergedOptions.events.nodeClick;\r\n\r\n        // We define our sub-prototype (AKA sub-class) properties\r\n\r\n        this.loadOnDemandSettings = new LoadOnDemandSettings(this, mergedOptions.loadOnDemandSettings);\r\n        this.nodeSettings = new NodeSettings(this, mergedOptions.nodeSettings);\r\n\r\n        // We define our methods, which derives from our options\r\n        this._getId = mergedOptions.getId;\r\n        this._getChildren = mergedOptions.getChildren;\r\n        this._getParentId = mergedOptions.getParentId;\r\n    }\r\n\r\n    /**\r\n     * Defines how to create the nodes for newly\r\n     * added data objects.\r\n     *\r\n     * @param {*} nodeEnter The D3 Enter selection of nodes.\r\n     * @param {*} nodes\r\n     * @returns {object} The tree object.\r\n     */\r\n    _nodeEnter(nodeEnter, nodes) {\r\n        throw 'The function _nodeEnter must be implemented';\r\n    }\r\n\r\n    /**\r\n     * Defines how to update the nodes for the\r\n     * data objects.\r\n     *\r\n     * @param {*} nodeUpdate The D3 Update selection of nodes.\r\n     * @param {*} nodeUpdateTransition The D3 transition object for the D3 Update selection of nodes.\r\n     * @param {*} nodes\r\n     * @returns {object} The tree object.\r\n     */\r\n    _nodeUpdate(nodeUpdate, nodeUpdateTransition, nodes) {\r\n        throw 'The function _nodeUpdate must be implemented';\r\n    }\r\n\r\n    /**\r\n     * Defines how to remove the nodes for the\r\n     * removed data objects.\r\n     *\r\n     * @param {*} nodeExit The D3 Exit selection of nodes.\r\n     * @param {*} nodeExitTransition The D3 transition object for the D3 Exit selection of nodes.\r\n     * @param {*} nodes\r\n     * @returns {object} The tree object.\r\n     */\r\n    _nodeExit(nodeExit, nodeExitTransition, nodes) {\r\n        throw 'The function _nodeExit must be implemented';\r\n    }\r\n\r\n    /**\r\n     * Gets the path generator used to render\r\n     * the links between the nodes.\r\n     *\r\n     * @returns {function} The callback function that generates the SVG path coordinates for the links, given a coordinates object.\r\n     */\r\n    _getLinkPathGenerator() {\r\n        throw 'The function _getLinkPathGenerator must be implemented';\r\n    }\r\n\r\n    /**\r\n     * Defines how to create the links for newly\r\n     * added data objects.\r\n     *\r\n     * @param {*} source The original data object that the links are being drawn for.\r\n     * @param {*} linkEnter The D3 Enter selection of links.\r\n     * @param {*} links\r\n     * @param {*} linkPathGenerator\r\n     * @returns {object} The tree object.\r\n     */\r\n    _linkEnter(source, linkEnter, links, linkPathGenerator) {\r\n        throw 'The function _linkEnter must be implemented';\r\n    }\r\n\r\n    /**\r\n     * Defines how to update the links for the\r\n     * data objects.\r\n     *\r\n     * @param {*} source The original data object that the links are being drawn for.\r\n     * @param {*} linkUpdate The D3 Update selection of links.\r\n     * @param {*} linkUpdateTransition The D3 transition object for the D3 Update selection of links.\r\n     * @param {*} links\r\n     * @param {*} linkPathGenerator The link path generator function.\r\n     * @returns {object} The tree object.\r\n     */\r\n    _linkUpdate(source, linkUpdate, linkUpdateTransition, links, linkPathGenerator) {\r\n        throw 'The function _linkUpdate must be implemented';\r\n    }\r\n\r\n    /**\r\n     * Defines how to remove the links for the\r\n     * removed data objects.\r\n     *\r\n     * @param {object} source The original data object that the links are being drawn for.\r\n     * @param {*} linkExit The D3 Exit selection of links.\r\n     * @param {*} linkExitTransition The D3 transition object for the D3 Update selection of links.\r\n     * @param {*} links\r\n     * @param {*} linkPathGenerator The link path generator function.\r\n     * @returns {object} The tree object.\r\n     */\r\n    _linkExit(source, linkExit, linkExitTransition, links, linkPathGenerator) {\r\n        throw 'The function _linkExit must be implemented';\r\n    }\r\n\r\n    /**\r\n     * Called when updating dimensions when\r\n     * node settings is configured to be\r\n     * 'nodesize'.\r\n     * \r\n     * @returns {number[]} An array with two values, representing the height and width of the node respectively.\r\n     */\r\n    _getNodeSize() {\r\n        throw 'The function _getNodeSize must be implemented';\r\n    }\r\n\r\n    /**\r\n     * Focuses and expands all the way through to a node.\r\n     * \r\n     * @param {*} idOrNodeDataItem The id of the node to focus, or the node data item object.\r\n     * @returns {object} The tree object.\r\n     */\r\n    focusToNode(idOrNodeDataItem) {\r\n        this.removeSelection(this.getRoot());\r\n        \r\n        var nodeDataItem = idOrNodeDataItem;\r\n        if (typeof nodeDataItem !== 'object' && nodeDataItem !== null)\r\n            nodeDataItem = this.getNode(nodeDataItem);\r\n        var parentNode = null;\r\n        \r\n        // Expand every parent/ancestor node\r\n        parentNode = nodeDataItem.parent;\r\n        while(parentNode)\r\n        {\r\n            if (parentNode._children)\r\n                this.expand(parentNode);\r\n            parentNode = parentNode.parent;\r\n        }\r\n\r\n        if (this.getAllowFocus())\r\n        {\r\n            // Hide the parent/ancestor node siblings\r\n            parentNode = nodeDataItem.parent;\r\n            while(parentNode)\r\n            {\r\n                this.hideSiblings(parentNode);\r\n                parentNode = parentNode.parent;\r\n            }\r\n            \r\n            this.updateTreeWithFocusOnNode(nodeDataItem);\r\n            nodeDataItem.selected = true;\r\n        }\r\n\r\n        this.update(this.getRoot());\r\n        this.centerNode(nodeDataItem);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Attaches a handler to the event.\r\n     * Note you can only attach one handler\r\n     * to an event at this stage.\r\n     * \r\n     * @param {string} event The event name.\r\n     * @param {function} handler A callback function that executes when the event is triggerred.\r\n     * @returns {object} The tree object.\r\n     */\r\n    on(event, handler) {\r\n        if (event.indexOf(\"on\") == 0)\r\n            event.slice(2); // Remove the \"on\"\r\n        var pascalCasedEventName = event.charAt(0).toUpperCase() + event.slice(1);\r\n        this[\"on\" + pascalCasedEventName] = handler;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Triggers all handlers associated with an event.\r\n     * \r\n     * @param {string} event The event name.\r\n     * @param {...object} [args] The arguments supplied to the event.\r\n     * @returns {*} The returned value of the triggered handler.\r\n     */\r\n    emit(event, ...args) {\r\n        if (event.indexOf(\"on\") == 0)\r\n            event.slice(2); // Remove the \"on\"\r\n        var pascalCasedEventName = event.charAt(0).toUpperCase() + event.slice(1);\r\n        var handler = this[\"on\" + pascalCasedEventName];\r\n        if (handler)\r\n            return handler.apply(this, args);\r\n    }\r\n\r\n    /**\r\n     * Returns a boolean whether the\r\n     * tree is using flat data or not.\r\n     * \r\n     * @returns {boolean} Whether the tree is using flat data or not.\r\n     */\r\n    getIsFlatData() {\r\n        return this._isFlatData;\r\n    }\r\n    \r\n    /**\r\n     * Sets the is flat data flag.\r\n     * If set to true, you must specify\r\n     * the `getParentId` option.\r\n     * \r\n     * @param {boolean} newIsFlatData Whether the tree is using flat data or not.\r\n     */\r\n    setIsFlatData(newIsFlatData) {\r\n        this._isFlatData = newIsFlatData;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Regenerates the node data.\r\n     * \r\n     * @returns {object} The tree object.\r\n     */\r\n    regenerateNodeData() {\r\n        // Assigns parent, children, height, depth\r\n        if (!this.getIsFlatData()) {\r\n            if (!this._getChildren)\r\n                throw \"If you are providing hierarchical structured data, then you must set the getChildren accessor property.\";\r\n\r\n            // Specify your children property here,\r\n            // so that D3's resulting root object\r\n            // has a mapping from its \"children\" property\r\n            // to your specified children property\r\n            this._root = d3.hierarchy(this.getData(), (data) => this.getChildren.call(this, data));\r\n        }\r\n        else {\r\n            if (!this._getParentId)\r\n                throw \"If you are providing flat structured data, then you must set the getParentId accessor property.\";\r\n\r\n            // stratifier is a function that would convert the flat\r\n            // dataset into hierarchically structured data\r\n            // to be used with D3 trees.\r\n            // It accepts the dataset as its parameter,\r\n            // and returns the converted data.\r\n\r\n            // Note that this is used instead of the d3.hierarchy()\r\n            // method as d3.hierarchy() should only be used if the\r\n            // data is already in heirarchical structure, and\r\n            // needs to be converted to D3 hierarchical nodes\r\n            var stratifier = d3.stratify()\r\n                .id((data, index, arr) => this.getId.call(this, data))\r\n                .parentId((data, index, arr) => this.getParentId.call(this, data));\r\n            this._root = stratifier(this.getData());\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the tree theme.\r\n     * \r\n     * @returns {string} The theme the tree is using.\r\n     */\r\n    getTheme() {\r\n        return this._theme;\r\n    }\r\n\r\n    /**\r\n     * Sets the tree theme.\r\n     * \r\n     * @param {string} theme The theme to set the tree to.\r\n     * @returns {object} The tree object.\r\n     */\r\n    setTheme(theme) {\r\n        this._theme = theme;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the tree orientation.\r\n     * \r\n     * @returns {string} The orientation the tree is using.\r\n     */\r\n    getOrientation() {\r\n        return this._orientation;\r\n    }\r\n\r\n    /**\r\n     * Sets the tree orientation.\r\n     * \r\n     * @param {string} orientation The orientation to set the tree to.\r\n     * @returns {object} The tree object.\r\n     */\r\n    setOrientation(orientation) {\r\n        this._orientation = orientation;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the data items used to render\r\n     * the nodes.\r\n     * \r\n     * @returns {object[]} The array of data items the tree uses.\r\n     */\r\n    getData() {\r\n        return this._data;\r\n    }\r\n\r\n    /**\r\n     * Sets the data items the tree should\r\n     * use to render the nodes.\r\n     * \r\n     * @param {object[]} newData The new set of data items.\r\n     * @returns {object} The tree object.\r\n     */\r\n    setData(newData) {\r\n        this._data = newData;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the node depth multiplier that\r\n     * affects the distance between the\r\n     * parent node and the child node.\r\n     * \r\n     * @returns {number} The node depth multiplier value\r\n     */\r\n    getNodeDepthMultiplier() {\r\n        return this._nodeDepthMultiplier;\r\n    }\r\n\r\n    /**\r\n     * Sets the node depth multiplier value.\r\n     * \r\n     * @param {number} newNodeDepthMultiplier The value that affects the distance between the parent node and the child node.\r\n     * @returns {object} The tree object.\r\n     */\r\n    setNodeDepthMultiplier(newNodeDepthMultiplier) {\r\n        this._nodeDepthMultiplier = newNodeDepthMultiplier;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the duration of animations\r\n     * for the tree.\r\n     * \r\n     * @returns {number} The animation duration in milliseconds.\r\n     */\r\n    getDuration() {\r\n        return this._duration;\r\n    }\r\n\r\n    /**\r\n     * Sets the duration of animations\r\n     * for the tree.\r\n     * \r\n     * @param {*} newDuration The animation duration in milliseconds.\r\n     * @returns {object} The tree object.\r\n     */\r\n    setDuration(newDuration) {\r\n        this._duration = newDuration;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the boolean value indicating\r\n     * whether the drag-to-pan pan feature\r\n     * is enabled or not.\r\n     * \r\n     * @returns {boolean} Whether panning is enabled or not.\r\n     */\r\n    getAllowPan() {\r\n        return this._allowPan;\r\n    }\r\n\r\n    /**\r\n     * Sets the boolean value indicating\r\n     * whether the drag-to-pan pan feature\r\n     * is enabled or not.\r\n     * \r\n     * @param {*} newAllowPan Whether panning is enabled or not.\r\n     * @returns {object} The tree object.\r\n     */\r\n    setAllowPan(newAllowPan) {\r\n        this._allowPan = newAllowPan;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the boolean value indicating\r\n     * whether the mouse wheel to zoom in/out\r\n     * feature is enabled or not.\r\n     * \r\n     * @returns {boolean} Whether zooming is enabled or not.\r\n     */\r\n    getAllowZoom() {\r\n        return this._allowZoom;\r\n    }\r\n\r\n    /**\r\n     * Sets the boolean value indicating\r\n     * whether the mouse wheel to zoom in/out\r\n     * feature is enabled or not.\r\n     * \r\n     * @param {boolean} newAllowZoom Whether zooming is enabled or not.\r\n     * @returns {object} The tree object.\r\n     */\r\n    setAllowZoom(newAllowZoom) {\r\n        this._allowZoom = newAllowZoom;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the boolean value indicating\r\n     * whether to focus to the clicked node\r\n     * or not. Focusing on a node would hide\r\n     * all irrelevant nodes that's not a \r\n     * parent, sibling or ancestor of the\r\n     * clicked node.\r\n     * \r\n     * @returns {boolean} Whether to focus to the clicked node.\r\n     */\r\n    getAllowFocus() {\r\n        return this._allowFocus;\r\n    }\r\n\r\n    /**\r\n     * Sets the boolean value indicating\r\n     * whether to pan to the clicked node\r\n     * feature is enabled or not.\r\n     * \r\n     * @param {boolean} newAllowFocus Whether to pan to the clicked node.\r\n     * @returns {object} The tree object.\r\n     */\r\n    setAllowFocus(newAllowFocus) {\r\n        this._allowFocus = newAllowFocus;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the boolean value indicating\r\n     * whether to pan to a clicked node.\r\n     * \r\n     * @returns {boolean} Whether to pan to the clicked node.\r\n     */\r\n    getAllowNodeCentering() {\r\n        return this._allowNodeCentering;\r\n    }\r\n\r\n    /**\r\n     * Whether to pan to a clicked node.\r\n     * \r\n     * @param {boolean} newAllowNodeCentering Whether to pan to the clicked node.\r\n     * @returns {object} The tree object.\r\n     */\r\n    setAllowNodeCentering(newAllowNodeCentering) {\r\n        this._allowNodeCentering = newAllowNodeCentering;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the minimum zoom scaling.\r\n     * \r\n     * @returns {number} The minimum zoom scale value.\r\n     */\r\n    getMinScale() {\r\n        return this._minScale;\r\n    }\r\n\r\n    /**\r\n     * Sets the minimum zoom scaling.\r\n     * \r\n     * @param {*} newMinScale The minimum zoom scale value.\r\n     * @returns {object} The tree object.\r\n     */\r\n    setMinScale(newMinScale) {\r\n        this._minScale = newMinScale;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the maximum zoom scaling.\r\n     * \r\n     * @returns {number} Maximum zoom scale value.\r\n     */\r\n    getMaxScale() {\r\n        return this._maxScale;\r\n    }\r\n\r\n    /**\r\n     * Sets the maximum zoom scaling.\r\n     * \r\n     * @param {*} newMaxScale The maximum zoom scale value.\r\n     * @returns {object} The tree object.\r\n     */\r\n    setMaxScale(newMaxScale) {\r\n        this._maxScale = newMaxScale;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the load on demand settings object.\r\n     * \r\n     * @returns {LoadOnDemandSettings} The load on demand settings.\r\n     */\r\n    getLoadOnDemandSettings() {\r\n        return this.loadOnDemandSettings;\r\n    }\r\n\r\n    /**\r\n     * Gets the node settings object.\r\n     * \r\n     * @returns {NodeSettings} The node settings.\r\n     */\r\n    getNodeSettings() {\r\n        return this.nodeSettings;\r\n    }\r\n\r\n    /**\r\n     * Gets the container DOM element.\r\n     * \r\n     * @returns {object} The container DOM element.\r\n     */\r\n    getElement() {\r\n        return this._element;\r\n    }\r\n\r\n    /**\r\n     * Sets the container DOM element\r\n     * \r\n     * @param {object} newElement The container DOM element.\r\n     * @returns {object} The tree object.\r\n     */\r\n    setElement(newElement) {\r\n        this._element = newElement;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the root node object.\r\n     * \r\n     * @return {object} The root D3 tree node object.\r\n     */\r\n    getRoot() {\r\n        return this._root;\r\n    }\r\n\r\n    /**\r\n     * Gets the D3 selection object for the SVG element.\r\n     * \r\n     * @return {object} Returns the D3 selection object.\r\n     */\r\n    getSvg() {\r\n        return this._svg;\r\n    }\r\n\r\n    /**\r\n     * Gets the D3 selection object for the view element.\r\n     * \r\n     * @returns {object} D3 selection object for the view element.\r\n     */\r\n    getView() {\r\n        return this._view;\r\n    }\r\n\r\n    /**\r\n     * Gets the D3 selection object for the\r\n     * panning container element.\r\n     * \r\n     * @returns {object} D3 selection object for the panning container element.\r\n     */\r\n    getPanningContainer() {\r\n        return this._panningContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets the D3 generator object used to\r\n     * generate the tree nodes coordinates.\r\n     * \r\n     * @returns {function} D3 tree generator object.\r\n     */\r\n    getTreeGenerator() {\r\n        return this._treeGenerator;\r\n    }\r\n\r\n    /**\r\n     * Get a single node given an id or a data item.\r\n     * \r\n     * @param {*|object} idOrDataItem The ID or data item to retrieve the D3 tree node data item with.\r\n     * @returns {object} D3 tree node data item.\r\n     */\r\n    getNode(idOrDataItem) {\r\n        var id = idOrDataItem;\r\n        if (typeof id === 'object' && id !== null)\r\n            id = this.getId(id);        \r\n        var rootNode = this.getRoot();\r\n\r\n        var getNodeChildren = (node) => {\r\n            if (node._children)\r\n                return node._children;\r\n            return [];\r\n        }\r\n        var node = recursiveFind(rootNode, getNodeChildren, x => this.getId(x.data) == id);\r\n        return node;\r\n    }\r\n\r\n    /**\r\n     * Get a single data item given an id.\r\n     * \r\n     * @param {*} id The ID to retrieve the data item with.\r\n     * @returns {object} The data item with the given ID.\r\n     */\r\n    getDataItem(id) {\r\n        var node = this.getNode(id);\r\n        return node.data;\r\n    }\r\n\r\n    /**\r\n     * Get the array of D3 node data items\r\n     * the D3 tree has generated.\r\n     * \r\n     * @returns {object[]} Array of D3 node data items.\r\n     */\r\n    getNodes() {\r\n        return this._nodes;\r\n    }\r\n\r\n    /**\r\n     * Get the array of visible D3 node\r\n     * data items the D3 tree has generated.\r\n     * \r\n     * @returns {object[]} Array of D3 node data items.\r\n     */\r\n    getVisibleNodes() {\r\n        return this._visibleNodes;\r\n    }\r\n\r\n    /**\r\n     * Get the array of D3 link data items\r\n     * the D3 tree has generated.\r\n     * \r\n     * @returns {object[]} Array of D3 link data items.\r\n     */\r\n    getLinks() {\r\n        return this._links;\r\n    }\r\n\r\n    /**\r\n     * Gets the D3 zoom listener used for\r\n     * the panning, zooming and focus features.\r\n     * \r\n     * @returns {function} The D3 zoom listener\r\n     */\r\n    getZoomListener() {\r\n        return this._zoomListener;\r\n    }\r\n\r\n    /**\r\n     * Gets the ID for a given data item.\r\n     * \r\n     * @param {object} dataItem The data item to get the ID from.\r\n     * @returns {*} The ID for the given data item.\r\n     */\r\n    getId(dataItem) {\r\n        return this._getId(dataItem);\r\n    }\r\n\r\n    /**\r\n     * Gets the children data items for a given data item.\r\n     * \r\n     * @param {object} dataItem The data item to get the children data items from.\r\n     * @returns {object[]} The array of child data items.\r\n     */\r\n    getChildren(dataItem) {\r\n        return this._getChildren(dataItem);\r\n    }\r\n\r\n    /**\r\n     * Gets the parent ID for a given data item.\r\n     * \r\n     * @param {object} dataItem The data item to get the parent ID from.\r\n     * @returns {*} The parent ID for the given data item.\r\n     */\r\n    getParentId(dataItem) {\r\n        return this._getParentId(dataItem);\r\n    }\r\n\r\n    /**\r\n     * Sets the ID accessor callback function,\r\n     * defining how to get a unique ID from a\r\n     * given data item.\r\n     * \r\n     * @param {getIdCallBack} newIdAccessor Callback function to get the ID for a given data item.\r\n     * @returns {object} The tree object.\r\n     */\r\n    setIdAccessor(newIdAccessor) {\r\n        this._getId = newIdAccessor;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the children accessor callback function,\r\n     * defining how to get the children data items\r\n     * from a given data item.\r\n     * \r\n     * @param {getChildrenCallBack} newChildrenAccessor Callback function to get the children for a given data item.\r\n     * @returns {object} The tree object.\r\n     */\r\n    setChildrenAccessor(newChildrenAccessor) {\r\n        this._getChildren = newChildrenAccessor;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the parent ID accessor callback function,\r\n     * defining how to get the parent ID from a\r\n     * given data item.\r\n     * \r\n     * @param {getParentIdCallBack} newParentIdAccessor Callback function to get the parent id for a given data item.\r\n     * @returns {object} The tree object.\r\n     */\r\n    setParentIdAccessor(newParentIdAccessor) {\r\n        this._getParentId = newParentIdAccessor;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the width of SVG, including the margins.\r\n     * \r\n     * @returns {number} The width of the SVG.\r\n     */\r\n    getWidth() {\r\n        return this.getWidthWithoutMargins() - this.getMargins().left - this.getMargins().right;\r\n    }\r\n\r\n    /**\r\n     * Gets the height of SVG, including the margins.\r\n     * \r\n     * @returns {number} The height of the SVG.\r\n     */\r\n    getHeight() {\r\n        return this.getHeightWithoutMargins() - this.getMargins().top - this.getMargins().bottom;\r\n    }\r\n\r\n    /**\r\n     * Sets the margins for the tree diagram.\r\n     * \r\n     * @param {object} newMargins The margin object.\r\n     * @param {number} newMargins.top The margin top for the tree diagram.\r\n     * @param {number} newMargins.right The margin right for the tree diagram.\r\n     * @param {number} newMargins.bottom The margin bottom for the tree diagram.\r\n     * @param {number} newMargins.left The margin left for the tree diagram.\r\n     * @returns {object} The tree object.\r\n     */\r\n    setMargins(newMargins) {\r\n        this._margins = newMargins;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the margins for the tree diagram.\r\n     * \r\n     * @returns {object} The margins object.\r\n     */\r\n    getMargins() {\r\n        return this._margins;\r\n    }\r\n\r\n    /**\r\n     * Sets the width of the SVG for the tree diagram.\r\n     * \r\n     * @param {*} newWidthWithoutMargin The width of SVG for the tree diagram.\r\n     * @returns {object} The tree object.\r\n     */\r\n    setWidthWithoutMargins(newWidthWithoutMargin) {\r\n        this._widthWithoutMargin = newWidthWithoutMargin;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the width of the SVG for the tree diagram.\r\n     * Does not include the margins.\r\n     * \r\n     * @returns {number} The width (not including the margins) of the SVG for the tree diagram.\r\n     */\r\n    getWidthWithoutMargins() {\r\n        return this._widthWithoutMargin;\r\n    }\r\n\r\n    /**\r\n     * Sets the height of the SVG for the tree diagram.\r\n     * \r\n     * @param {*} newHeightWithoutMargin The height of SVG for the tree diagram.\r\n     * @returns {object} The tree object.\r\n     */\r\n    setHeightWithoutMargins(newHeightWithoutMargin) {\r\n        this._heightWithoutMargin = newHeightWithoutMargin;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the height of the SVG for the tree diagram.\r\n     * Does not include the margins.\r\n     * \r\n     * @returns {number} The height (not including the margins) of the SVG for the tree diagram.\r\n     */\r\n    getHeightWithoutMargins() {\r\n        return this._heightWithoutMargin;\r\n    }\r\n\r\n    /**\r\n     * Updates the dimensions of the SVG.\r\n     * \r\n     * @returns {object} The tree object.\r\n     */\r\n    updateDimensions() {\r\n        // Update SVG with new width and height\r\n        this.getSvg()\r\n            // Use viewBox to set SVG width and height\r\n            // so it is responsive, and can be resized\r\n            // based on the parent element\r\n            .attr(\"viewBox\", \"0 0 \" + this.getWidthWithoutMargins() + \" \" + this.getHeightWithoutMargins());\r\n\r\n        var margins = this.getMargins();\r\n\r\n        var needToCenterView = false;\r\n        // update the tree generator with the new width and height\r\n        var sizingMode = this.nodeSettings.getSizingMode();\r\n        if (typeof sizingMode === 'string')\r\n            sizingMode = sizingMode.trim().toLowerCase();\r\n        if (sizingMode === \"nodesize\") {\r\n            this.getTreeGenerator()\r\n                .nodeSize(this._getNodeSize());\r\n\r\n            // Only perform centering if node centering is turned off,\r\n            // as that would center to the root node anyway. Node\r\n            // centering is turned on when allow focus is turned on.\r\n            if (this.getAllowFocus() === false)\r\n                needToCenterView = true;\r\n        }\r\n        else {\r\n            this.getTreeGenerator()\r\n                .size([this.getHeight(), this.getWidth()]);\r\n        }\r\n\r\n        if (needToCenterView === false) {\r\n            // Update the view with the new margins\r\n            this.getView()\r\n                .attr(\"transform\", \"translate(\" + margins.left + \",\" + margins.top + \")\");\r\n        }\r\n        else {\r\n            // Move the view downwards as to center the root node\r\n            // This is due to when you use node-size, it sets the\r\n            // node origin at 0, 0 instead of automatically\r\n            // centering it as it does with size()\r\n            this.getView()\r\n                .attr(\"transform\", \"translate(\" + margins.left + \", \" + (this.getHeight() / 2 + margins.top) + \")\");\r\n        }\r\n\r\n        // If we need to center the tree by adjusting the view and the node position\r\n        var x0, y0;\r\n        if (this.getOrientation() === 'topToBottom')\r\n        {\r\n            if (needToCenterView === false) {\r\n                x0 = this.getWidth() / 2;\r\n            }\r\n            else {\r\n                x0 = 0;\r\n            }\r\n            y0 = this.getHeight() / 4;\r\n        }\r\n        else\r\n        {\r\n            if (needToCenterView === false) {\r\n                x0 = this.getHeight() / 2;\r\n            }\r\n            else {\r\n                x0 = 0;\r\n            }\r\n            y0 = 0;\r\n        }\r\n\r\n        this.getRoot().x0 = x0;\r\n        this.getRoot().y0 = y0;\r\n\r\n        if (this.getZoomListener()) {\r\n            this.getZoomListener()\r\n                .extent([[0, 0], [this.getWidthWithoutMargins(), this.getHeightWithoutMargins()]]);\r\n        }\r\n        \r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Validates the settings to ensure the\r\n     * tree diagram is ready to be generated.\r\n     * \r\n     * @returns {object} The tree object.\r\n     */\r\n    validateSettings() {\r\n        // Check to make sure compulsory options are provided\r\n        if (!this.getElement())\r\n            throw \"Need to pass in an element as part of the options\";\r\n        if (!this.getData())\r\n            throw \"Need to pass in data as part of the options\";\r\n\r\n        // Checks if mandatory methods to specify exists\r\n        if (!this._getId)\r\n            throw \"Need to define the getId function as part of the options\";\r\n        this.loadOnDemandSettings.validateSettings();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates and set up the the tree diagram.\r\n     * \r\n     * @returns {object} The tree object.\r\n     */\r\n    initialize() {\r\n        this.validateSettings();\r\n        this.regenerateNodeData();\r\n\r\n        while (this.getElement().firstChild) {\r\n            this.getElement().removeChild(this.getElement().firstChild);\r\n        };\r\n\r\n        // Create the svg, and set its dimensions\r\n        this._svg = d3.select(this.getElement())\r\n            .append(\"svg\")\r\n                .classed('mitch-d3-tree', true)\r\n                .classed(this.getTheme(), true)\r\n                .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\r\n                .style(\"width\", \"100%\")\r\n                .style(\"height\", \"100%\");\r\n\r\n        // Create the view with margins\r\n        this._view = this.getSvg().append(\"g\")\r\n            .classed(\"view\", true);\r\n\r\n        // Create tree generator to position the nodes\r\n        this._treeGenerator = d3.tree();\r\n\r\n        // Create the panning container which panning should act upon\r\n        this._panningContainer = this.getView().append(\"g\")\r\n            .classed(\"panningContainer\", true);\r\n\r\n        this._zoomListener = d3.zoom()\r\n            // Limit zoom level\r\n            .scaleExtent([this.getMinScale(), this.getMaxScale()])\r\n            // Zoom in D3 translates to the native HTML/JS events of:\r\n            // - Double Clicking (i.e. to zoom in)\r\n            // - Dragging (i.e. panning or moving around)\r\n            // - Wheel (i.e. zoom in/out)\r\n            .on(\"zoom\", () => {\r\n                // The \"zoom\" event populates d3.event with an object that has\r\n                // a \"transform\" property (an object with three properties\r\n                // of x, y, and k), where x and y is for translation purposes,\r\n                // and k is the scaling factor\r\n                var transform = d3.event.transform;\r\n                this.getPanningContainer().attr(\"transform\", transform);\r\n            });\r\n        this.getSvg().call(this.getZoomListener());\r\n\r\n        if (this.getAllowPan() === false) {\r\n            this.getSvg()\r\n                .on(\"mousedown.zoom\", null)\r\n                .on(\"touchstart.zoom\", null)\r\n                .on(\"touchmove.zoom\", null)\r\n                .on(\"touchend.zoom\", null);\r\n        }\r\n        if (this.getAllowZoom() === false) {\r\n            this.getSvg()\r\n                .on(\"dblclick.zoom\", null)\r\n                .on(\"wheel.zoom\", null);\r\n        }\r\n\r\n        this.updateDimensions();\r\n\r\n        this._populateUnderlyingChildren(this.getRoot());\r\n\r\n        if (this.getRoot().children)\r\n            this.getRoot().children.forEach(this.collapseRecursively);\r\n        this.removeSelection(this.getRoot());\r\n\r\n        // Call the first update, which renders\r\n        // the initial tree\r\n        this.update(this.getRoot());\r\n\r\n        // Centers the root node\r\n        this.centerNode(this.getRoot());\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Expands the given node data item.\r\n     * \r\n     * @param {object} nodeDataItem The D3 node data item to expand.\r\n     * @returns {object} The tree object.\r\n     */\r\n    expand(nodeDataItem) {\r\n        nodeDataItem.children = nodeDataItem._children;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Expands the given node data item,\r\n     * and its children and descendants.\r\n     * \r\n     * @param {object} nodeDataItem The D3 node data item to expand.\r\n     * @returns {object} The tree object.\r\n     */\r\n    expandRecursively(nodeDataItem) {\r\n        var rec = function recursive(directNodeDataItem) {\r\n            if (directNodeDataItem.children) {\r\n                directNodeDataItem.children.forEach(recursive);\r\n                directNodeDataItem.children = directNodeDataItem._children;\r\n            }\r\n        };\r\n        rec(nodeDataItem);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Collapses the given node data item.\r\n     * \r\n     * @param {object} nodeDataItem The D3 node data item to collapse.\r\n     * @returns {object} The tree object.\r\n     */\r\n    collapse(nodeDataItem) {\r\n        nodeDataItem.children = null;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Collapses the given node data item,\r\n     * and its children and descendants.\r\n     * \r\n     * @param {object} nodeDataItem The D3 node data item to collapse.\r\n     * @returns {object} The tree object.\r\n     */\r\n    collapseRecursively(nodeDataItem) {\r\n        var rec = function recursive(directNodeDataItem) {\r\n            if (directNodeDataItem.children) {\r\n                directNodeDataItem.children.forEach(recursive);\r\n                directNodeDataItem.children = null;\r\n            }\r\n        };\r\n        rec(nodeDataItem);\r\n        return this;\r\n    }\r\n    \r\n    /**\r\n     * Populates the node's children to a hidden property.\r\n     * \r\n     * @param {object} nodeDataItem The D3 node data item to collapse.\r\n     * @returns {object} The tree object.\r\n     */\r\n    _populateUnderlyingChildren(nodeDataItem) {\r\n        var rec = function recursive(directNodeDataItem) {\r\n            if (directNodeDataItem.children) {\r\n                directNodeDataItem._children = directNodeDataItem.children;\r\n                directNodeDataItem._children.forEach(recursive);\r\n            }\r\n        };\r\n        rec(nodeDataItem);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove node selections for a given node and it's children.\r\n     * \r\n     * @param {object} nodeDataItem The D3 node data item to remove selection from.\r\n     * @returns {object} The tree object.\r\n     */\r\n    removeSelection(nodeDataItem) {\r\n        var rec = function recursive(directNodeDataItem) {\r\n            directNodeDataItem.selected = false;\r\n            if (directNodeDataItem.children) {\r\n                directNodeDataItem.children.forEach(recursive);\r\n            }\r\n        };\r\n        rec(nodeDataItem);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Center the view to a D3 tree node.\r\n     * \r\n     * @param {*} nodeDataItem The D3 node data item to focus on.\r\n     * @returns {object} The tree object.\r\n     */\r\n    centerNode(nodeDataItem) {\r\n        var transform = d3.zoomTransform(this.getSvg().node());\r\n        var scale = transform.k;\r\n\r\n        var x, y, translateX, translateY;\r\n        if (this.getOrientation().toLowerCase() === 'toptobottom')\r\n        {\r\n            x = -nodeDataItem.x0;\r\n            y = -nodeDataItem.y0;\r\n            translateX = x * scale + this.getWidth() / 2;\r\n            translateY = y * scale + this.getHeight() / 2;\r\n        }\r\n        else\r\n        {\r\n            x = -nodeDataItem.y0;\r\n            y = -nodeDataItem.x0;\r\n            translateX = x * scale + this.getWidth() / 4;\r\n            translateY = y * scale + this.getHeight() / 2;\r\n        }\r\n\r\n        this.getSvg().transition()\r\n            .duration(this.getDuration())\r\n            .call(this.getZoomListener().transform, d3.zoomIdentity.translate(translateX, translateY).scale(scale));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Triggers the nodeClick event when a\r\n     * D3 node is clicked on, and proceeds\r\n     * to focus/expand/collapse the node.\r\n     * \r\n     * @param {object} nodeDataItem The D3 node data item that was clicked.\r\n     * @param {number} index The index of the D3 node being clicked in the array of siblings.\r\n     * @param {object[]} arr Array of siblings D3 node, inclusive of the clicked node data item itself.\r\n     * @returns {boolean} True meaning it successfully focused/expanded/collapsed a node. False otherwise.\r\n     */\r\n    _onNodeClick(nodeDataItem, index, arr) {\r\n        var continueFocus = true;\r\n        continueFocus = this.emit('nodeClick', nodeDataItem, index, arr);\r\n        if (continueFocus === false)\r\n            return false;\r\n        if (this.getAllowFocus())\r\n            this.nodeFocus.call(this, nodeDataItem);\r\n        else\r\n            this.nodeToggle.call(this, nodeDataItem);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates a child D3 tree node.\r\n     * \r\n     * @param {object} parentNodeDataItem The parent D3 tree node data item.\r\n     * @param {object} dataItem The data item.\r\n     * @returns {object} The newly created D3 node;\r\n     */\r\n    _createNode(parentNodeDataItem, dataItem) {\r\n        // Create a D3 node object from resulting data items using d3.hierarchy()\r\n        var newNode = d3.hierarchy(dataItem);\r\n\r\n        // Now add missing properties to Node like child, parent, depth\r\n        newNode.depth = parentNodeDataItem.depth + 1;\r\n        newNode.height = parentNodeDataItem.height - 1;\r\n        newNode.parent = parentNodeDataItem;\r\n        newNode.id = this.getId.call(this, dataItem);\r\n        return newNode;\r\n    }\r\n\r\n    /**\r\n     * Creates and adds a child D3 tree\r\n     * node to a given parent D3 tree node.\r\n     * \r\n     * @param {object} parentNodeDataItem The parent D3 tree node data item.\r\n     * @param {object} dataItem The data item.\r\n     * @returns {object} The newly created and added D3 node;\r\n     */\r\n    _addUnderlyingChildNode(parentNodeDataItem, dataItem) {\r\n        var newNode = this._createNode(parentNodeDataItem, dataItem);\r\n        parentNodeDataItem._children.push(newNode);\r\n        return newNode;\r\n    }\r\n    \r\n    /**\r\n     * Process the loaded data from AJAX\r\n     * resulting from a node expand.\r\n     * \r\n     * @param {object} nodeDataItem The D3 node data item being expanded.\r\n     * @param {object[]} result The children data items to process.\r\n     * @returns {object} The tree object.\r\n     */\r\n    _processLoadedDataForNodeFocus(nodeDataItem, result) {\r\n        nodeDataItem._children = [];\r\n        result.forEach((currentItem) => this._addUnderlyingChildNode(nodeDataItem, currentItem));\r\n\r\n        this._populateUnderlyingChildren(nodeDataItem);\r\n\r\n        this.updateTreeWithFocusOnNode(nodeDataItem);\r\n\r\n        var wasSelected = nodeDataItem.selected;\r\n        this.removeSelection(this.getRoot());\r\n        nodeDataItem.selected = true;\r\n\r\n        this.update(nodeDataItem);\r\n\r\n        if (this.getAllowNodeCentering() === true && \r\n            (wasSelected === false || typeof wasSelected === 'undefined'))\r\n            this.centerNode(nodeDataItem);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Focuses to a node, given a node data item.\r\n     * \r\n     * @param {object} nodeDataItem The node being focused on.\r\n     * @returns {object} The tree object.\r\n     */\r\n    nodeFocus(nodeDataItem) {\r\n        if (!nodeDataItem.children && !nodeDataItem._children\r\n            && this.loadOnDemandSettings.isEnabled()\r\n            && this.loadOnDemandSettings.hasChildren(nodeDataItem.data)) {\r\n            var processData = (result) => this._processLoadedDataForNodeFocus(nodeDataItem, result);\r\n            this.loadOnDemandSettings.loadChildren(nodeDataItem.data, processData);\r\n        }\r\n        else {\r\n            this.updateTreeWithFocusOnNode(nodeDataItem);\r\n\r\n            var wasSelected = nodeDataItem.selected;\r\n            this.removeSelection(this.getRoot());\r\n            nodeDataItem.selected = true;\r\n\r\n            this.update(nodeDataItem);\r\n\r\n            if (this.getAllowNodeCentering() === true && \r\n                (wasSelected === false || typeof wasSelected === 'undefined'))\r\n                this.centerNode(nodeDataItem);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Process the loaded data from AJAX\r\n     * resulting from a node toggle.\r\n     * \r\n     * @param {object} nodeDataItem The D3 node data item.\r\n     * @param {object[]} result Array of sibling node data items, inclusive the node being toggled.\r\n     * @returns {object} The tree object.\r\n     */\r\n    _processLoadedDataForNodeToggle(nodeDataItem, result) {\r\n        nodeDataItem._children = [];\r\n        result.forEach((currentItem) => this._addUnderlyingChildNode(nodeDataItem, currentItem));\r\n\r\n        this.expand(nodeDataItem);\r\n\r\n        this.update(nodeDataItem);\r\n        if (this.getAllowNodeCentering() === true)\r\n            this.centerNode(nodeDataItem);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Toggles the children visibility for a given node data item.\r\n     * \r\n     * @param {*} nodeDataItem D3 Node data item.\r\n     * @returns {object} The tree object.\r\n     */\r\n    nodeToggle(nodeDataItem) {\r\n        // If it hasn't been loaded, and it's specified to have children,\r\n        // then perform load-on-demand to load new items from server\r\n        // and add them as child nodes\r\n        if (!nodeDataItem.children && !nodeDataItem._children\r\n            && this.loadOnDemandSettings.isEnabled()\r\n            && this.loadOnDemandSettings.hasChildren(nodeDataItem.data)) {\r\n            var processData = (result) => this._processLoadedDataForNodeToggle(nodeDataItem, result);\r\n            this.loadOnDemandSettings.loadChildren(nodeDataItem.data, processData);\r\n        }\r\n        else {\r\n            if (nodeDataItem.children)\r\n                this.collapse(nodeDataItem);\r\n            else\r\n                this.expand(nodeDataItem)\r\n            this.update(nodeDataItem);\r\n            if (this.getAllowNodeCentering() === true)\r\n                this.centerNode(nodeDataItem);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Hide the siblings nodes\r\n     * for a given node.\r\n     * \r\n     * @param {object} nodeDataItem The D3 node to hide siblings for.\r\n     * @returns {object} The tree object.\r\n     */\r\n    hideSiblings(nodeDataItem) {\r\n        var parentNode = nodeDataItem.parent;\r\n\r\n        if (parentNode) {\r\n            var nodeId = this.getId(nodeDataItem.data);\r\n            parentNode.children.filter(x => this.getId(x.data) != nodeId).forEach(this.collapseRecursively);\r\n            parentNode.children = [];\r\n            parentNode.children.push(nodeDataItem);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the tree diagram so only the relevant\r\n     * focused node and direct parent hierarchies are\r\n     * shown.\r\n     * \r\n     * @param {object} nodeDataItem D3 Node data item.\r\n     * @returns {object} The tree object.\r\n     */\r\n    updateTreeWithFocusOnNode(nodeDataItem) {\r\n        if (!nodeDataItem.children && nodeDataItem._children) { // If there's no children nodes, but there a some children items to expand\r\n            this.hideSiblings(nodeDataItem);\r\n\r\n            this.expand(nodeDataItem);\r\n            // Collapse the current focused node's children, so only direct childrens are shown\r\n            nodeDataItem.children.forEach(this.collapseRecursively);\r\n        }\r\n        else if (nodeDataItem.children) { // If there are rendered children nodes\r\n            // Checks if its children has any rendered children\r\n            var hasNestedChildren = nodeDataItem.children.some((currentItem, index, arr) => currentItem.children);\r\n\r\n            var isPreviouslyExpandedNode = !hasNestedChildren;\r\n            // If it is a parent node with children, and\r\n            // is not the previous expanded node,\r\n            // then we'll focus on it, expanding it\r\n            // and showing all of its children\r\n            if (isPreviouslyExpandedNode === false) {\r\n                this.collapseRecursively(nodeDataItem);\r\n                this.expand(nodeDataItem);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the tree nodes given\r\n     * a D3 tree node.\r\n     * \r\n     * @param {object} nodeDataItem The D3 node data item to update.\r\n     * @param {object[]} nodes Array of D3 node data items.\r\n     * @returns {object} The tree object.\r\n     */\r\n    _updateNodes(nodeDataItem, nodes) {\r\n        // Normalize for fixed-depth.\r\n        \r\n        // You can increase the depth multiplication to get more depth,\r\n        // i.e. increasing the distance between the parent node and child node\r\n        nodes.forEach((data) => data.y = data.depth * this.getNodeDepthMultiplier());\r\n\r\n        // ****************** Nodes section ***************************\r\n\r\n        // Update the nodes...\r\n        var nodes = this.getPanningContainer().selectAll(\"g.node\")\r\n            // The second parameter of data() takes in a \r\n            // function, determining the key of the data\r\n            // items, which is useful to retrieve items,\r\n            // and databind them\r\n            .data(nodes, (data) => this.getId.call(this, data.data));\r\n\r\n        // Enter any new nodes at the parent's previous position.\r\n        var nodeEnter = nodes.enter().append(\"g\")\r\n            .classed(\"node\", true)\r\n            .attr(\"transform\", (data, index, arr) => {\r\n                if (this.getOrientation().toLowerCase() === 'toptobottom')\r\n                    return \"translate(\" + nodeDataItem.x0 + \",\" + nodeDataItem.y0 + \")\";\r\n                else\r\n                    return \"translate(\" + nodeDataItem.y0 + \",\" + nodeDataItem.x0 + \")\";\r\n            })\r\n            .on(\"click\", (data, index, arr) => this._onNodeClick.call(this, data, index, arr));\r\n\r\n        this._nodeEnter(nodeEnter, nodes);\r\n\r\n        // UPDATE\r\n        var nodeUpdate = nodeEnter.merge(nodes);\r\n        var nodeUpdateTransition = nodeUpdate.transition().duration(this.getDuration());\r\n\r\n        nodeUpdate\r\n            .classed(\"collapsed\", (data, index, arr) => {\r\n                if (!data.children && data._children)\r\n                    return true;\r\n                else if (this.loadOnDemandSettings.isEnabled()\r\n                            && this.loadOnDemandSettings.hasChildren(data.data)\r\n                            && !data.children && !data._children) // If it does have children to load via AJAX\r\n                    return true;\r\n                return false;\r\n            })\r\n            .classed(\"expanded\", (data, index, arr) => data.children)\r\n            .classed(\"childless\", (data, index, arr) => !data.children && !data._children)\r\n            .classed(\"selected\", (data, index, arr) => data.selected);\r\n\r\n            this._nodeUpdate(nodeUpdate, nodeUpdateTransition, nodes);\r\n\r\n        // Remove any exiting nodes\r\n        var nodeExit = nodes.exit();\r\n        var nodeExitTransition = nodeExit.transition().duration(this.getDuration());\r\n\r\n        this._nodeExit(nodeExit, nodeExitTransition, nodes);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the tree node links given\r\n     * a D3 tree node.\r\n     * \r\n     * @param {object} nodeDataItem The D3 node data item. \r\n     * @param {object[]} links Array of D3 link data items.\r\n     * @returns {object} The tree object.\r\n     */\r\n    _updateLinks(nodeDataItem, links) {\r\n        var linkPathGenerator = this._getLinkPathGenerator();\r\n\r\n        // Update the links...\r\n        var link = this.getPanningContainer().selectAll(\"path.link\")\r\n            .data(links, (data) => this.getId.call(this, data.data));\r\n\r\n        // Enter any new links at the parent's previous position.\r\n        var linkEnter = link.enter().insert(\"path\", \"g\")\r\n            .classed(\"link\", true);\r\n        this._linkEnter(nodeDataItem, linkEnter, link, linkPathGenerator);\r\n\r\n        // UPDATE\r\n        var linkUpdate = linkEnter.merge(link);\r\n        var linkUpdateTransition = linkUpdate.transition()\r\n                                             .duration(this.getDuration());\r\n\r\n        // Transition back to the parent element position\r\n        this._linkUpdate(nodeDataItem, linkUpdate, linkUpdateTransition, link, linkPathGenerator);\r\n\r\n        // Remove any exiting links\r\n        var linkExit = link.exit();\r\n        var linkExitTransition = linkExit.transition()\r\n                                          .duration(this.getDuration())\r\n\r\n        this._linkExit(nodeDataItem, linkExit, linkExitTransition, link, linkPathGenerator);\r\n\r\n        // Store the old positions for transition.\r\n        this.getVisibleNodes().forEach((data) => {\r\n            data.x0 = data.x;\r\n            data.y0 = data.y;\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the tree given a D3 tree node.\r\n     * \r\n     * @param {object} nodeDataItem The D3 node data item.\r\n     * @returns {object} The tree object.\r\n     */\r\n    update(nodeDataItem) {\r\n        var treeGenerator = this.getTreeGenerator();\r\n        // Assigns the x and y position for the nodes\r\n        var treeData = treeGenerator(this.getRoot());\r\n        this._visibleNodes = treeData.descendants();\r\n        this._nodes = [this.getRoot(), ...recursiveGet(this.getRoot(), (node) => node._children)];\r\n        this._links = treeData.descendants().slice(1);\r\n\r\n        this._updateNodes(nodeDataItem, this.getVisibleNodes())\r\n            ._updateLinks(nodeDataItem, this.getLinks());\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the unique ID for a given data item.\r\n     * @callback getIdCallBack\r\n     * @param {object} data Represents the single data item to extract the ID from.\r\n     * @returns {*} The unique ID from the given data item.\r\n     */\r\n\r\n    /**\r\n     * Gets the parent ID for a given data item.\r\n     * @callback getParentIdCallBack\r\n     * @param {object} data Represents the single data item to extract the parent ID from.\r\n     * @returns {*} The parent ID from the given data item.\r\n     */\r\n\r\n    /**\r\n     * Gets the children items for a given\r\n     * data item.\r\n     * @callback getChildrenCallBack\r\n     * @param {object} data Represents the single data item to extract the children data items from.\r\n     * @returns {object[]} The array of data items representing the children of the given data item.\r\n     */\r\n\r\n    /**\r\n     * Event handler for the node click event.\r\n     * @callback nodeClickCallBack\r\n     * @param {object} nodeDataItem Node data item representing the clicked node.\r\n     * @param {object} nodeDataItem.data The data item of the clicked node.\r\n     * @param {number} index Index of the clicked item in the array of siblings.\r\n     * @param {object[]} arr The array of sibling rendered SVG elements, inclusive of the node itself.\r\n     * @returns {boolean} If returns false, it'll prevent propogation to focus/expand/collapse the node.\r\n     */\r\n}\r\n\r\n// Define option defaults using a class static property\r\nBaseTree.defaults = {\r\n    theme: 'default',\r\n    orientation: 'leftToRight', // topToBottom, rightToLeft, bottomToTop\r\n    allowPan: true,\r\n    allowZoom: true,\r\n    allowFocus: true,\r\n    allowNodeCentering: true,\r\n    minScale: 1, // Minimum zoom scaling\r\n    maxScale: 2, // Maximum zoom scaling\r\n    // You can increase the depth multiplication to get more depth,\r\n    // i.e. increasing the distance between the parent node and child node\r\n    nodeDepthMultiplier: 300,\r\n    isFlatData: false,\r\n    getId: null,\r\n    getParentId: null,\r\n    getChildren: null,\r\n    widthWithoutMargins: 960,\r\n    heightWithoutMargins: 800,\r\n    margins: {\r\n        top: 40,\r\n        right: 20,\r\n        bottom: 40,\r\n        left: 100\r\n    },\r\n    duration: 750,\r\n    events: {\r\n        nodeClick: null\r\n    },\r\n    loadOnDemandSettings: {\r\n        // Defaults are defined in the load-on-demand settings prototype\r\n    },\r\n    nodeSettings: {\r\n        // Defaults are defined in the node settings prototype\r\n    },\r\n}\r\n\r\nexport default BaseTree;",
    "static": true,
    "longname": "D:/Git Repositories/Packages/d3-mitch-tree/src/js/BaseTree.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "function",
    "name": "recursiveFind",
    "memberof": "js/BaseTree.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/BaseTree.js~recursiveFind",
    "access": "public",
    "export": false,
    "importPath": "d3-mitch-tree/js/BaseTree.js",
    "importStyle": null,
    "description": "Recursively find a particular object within a hierarchical dataset.",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object|null} The first object matching the conditions."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "hierarchicalObject",
        "description": "The initial hierarchical object to start the recursive find."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "getChildren",
        "description": "The callback function that gets the children items of the hierarchical object."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "findCondition",
        "description": "The callback function that defines whether the object matches the condition to be returned or not."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object",
        "null"
      ],
      "spread": false,
      "description": "The first object matching the conditions."
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "function",
    "name": "recursiveGet",
    "memberof": "js/BaseTree.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/BaseTree.js~recursiveGet",
    "access": "public",
    "export": false,
    "importPath": "d3-mitch-tree/js/BaseTree.js",
    "importStyle": null,
    "description": "Recursively gets a set of objects within a hierarchical dataset.",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "hierarchicalObject",
        "description": "The initial hierarchical object to start the recursive get."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "getChildren",
        "description": "The callback function that gets the children items of the hierarchical object."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "class",
    "name": "BaseTree",
    "memberof": "js/BaseTree.js",
    "static": true,
    "longname": "js/BaseTree.js~BaseTree",
    "access": "public",
    "export": true,
    "importPath": "d3-mitch-tree/js/BaseTree.js",
    "importStyle": "BaseTree",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 52,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options object."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "default",
        "defaultRaw": "default",
        "name": "options.theme",
        "description": "The theme of the tree."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "leftToRight",
        "defaultRaw": "leftToRight",
        "name": "options.orientation",
        "description": "The orientation of the tree."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.allowPan",
        "description": "Enables/disables the mouse drag to pan feature."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.allowZoom",
        "description": "Enables/disables the mouse wheel to zoom feature."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.allowFocus",
        "description": "If true, clicking on a node would focus to the node, hiding all irrelevant nodes that's not a parent, ancestor, or sibling."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.allowNodeCentering",
        "description": "If true, clicking on a node would pan to the node."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "options.minScale",
        "description": "Minimum zoom scaling."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "options.maxScale",
        "description": "Maximum zoom scaling."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "300",
        "defaultRaw": 300,
        "name": "options.nodeDepthMultiplier",
        "description": "The distance between the parent and child nodes."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.isFlatData",
        "description": "Indicates whether the passed data was a flat array of objects. If true, you must specify the `getParentId` option."
      },
      {
        "nullable": null,
        "types": [
          "getIdCallBack"
        ],
        "spread": false,
        "optional": false,
        "name": "options.getId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "getParentIdCallBack"
        ],
        "spread": false,
        "optional": true,
        "name": "options.getParentId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "getChildrenCallBack"
        ],
        "spread": false,
        "optional": true,
        "name": "options.getChildren",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "960",
        "defaultRaw": 960,
        "name": "options.widthWithoutMargins",
        "description": "The width of the tree, not including the margins."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "800",
        "defaultRaw": 800,
        "name": "options.heightWithoutMargins",
        "description": "The height of the tree, not including the margins."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "options.margins",
        "description": "Object specifying the margins of the tree diagram."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.margins.top",
        "description": "The top margin for the tree diagram."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.margins.right",
        "description": "The right margin for the tree diagram."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.margins.bottom",
        "description": "The bottom margin for the tree diagram."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.margins.left",
        "description": "The left margin for the tree diagram."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.duration",
        "description": "Integer in milliseconds determining the duration of the animations for the tree."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "options.events",
        "description": "Object specifying the events for the tree."
      },
      {
        "nullable": null,
        "types": [
          "nodeClickCallBack"
        ],
        "spread": false,
        "optional": true,
        "name": "options.events.nodeClick",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "LoadOnDemandSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "options.loadOnDemandSettings",
        "description": "Object specifying the load-on-demand settings."
      },
      {
        "nullable": null,
        "types": [
          "NodeSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "options.nodeSettings",
        "description": "Object specifying the node settings for the tree."
      }
    ]
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "_root",
    "memberof": "js/BaseTree.js~BaseTree",
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_root",
    "access": "private",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "_svg",
    "memberof": "js/BaseTree.js~BaseTree",
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_svg",
    "access": "private",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "_treeGenerator",
    "memberof": "js/BaseTree.js~BaseTree",
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_treeGenerator",
    "access": "private",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "_linkPathGenerator",
    "memberof": "js/BaseTree.js~BaseTree",
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_linkPathGenerator",
    "access": "private",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "_visibleNodes",
    "memberof": "js/BaseTree.js~BaseTree",
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_visibleNodes",
    "access": "private",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "_links",
    "memberof": "js/BaseTree.js~BaseTree",
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_links",
    "access": "private",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "onNodeClick",
    "memberof": "js/BaseTree.js~BaseTree",
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#onNodeClick",
    "access": "public",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "loadOnDemandSettings",
    "memberof": "js/BaseTree.js~BaseTree",
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#loadOnDemandSettings",
    "access": "public",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "nodeSettings",
    "memberof": "js/BaseTree.js~BaseTree",
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#nodeSettings",
    "access": "public",
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "_getId",
    "memberof": "js/BaseTree.js~BaseTree",
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_getId",
    "access": "private",
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "_getChildren",
    "memberof": "js/BaseTree.js~BaseTree",
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_getChildren",
    "access": "private",
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "_getParentId",
    "memberof": "js/BaseTree.js~BaseTree",
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_getParentId",
    "access": "private",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "_nodeEnter",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_nodeEnter",
    "access": "private",
    "description": "Defines how to create the nodes for newly\nadded data objects.",
    "lineNumber": 139,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeEnter",
        "description": "The D3 Enter selection of nodes."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nodes",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "_nodeUpdate",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_nodeUpdate",
    "access": "private",
    "description": "Defines how to update the nodes for the\ndata objects.",
    "lineNumber": 152,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeUpdate",
        "description": "The D3 Update selection of nodes."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeUpdateTransition",
        "description": "The D3 transition object for the D3 Update selection of nodes."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nodes",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "_nodeExit",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_nodeExit",
    "access": "private",
    "description": "Defines how to remove the nodes for the\nremoved data objects.",
    "lineNumber": 165,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeExit",
        "description": "The D3 Exit selection of nodes."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeExitTransition",
        "description": "The D3 transition object for the D3 Exit selection of nodes."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nodes",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "_getLinkPathGenerator",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_getLinkPathGenerator",
    "access": "private",
    "description": "Gets the path generator used to render\nthe links between the nodes.",
    "lineNumber": 175,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{function} The callback function that generates the SVG path coordinates for the links, given a coordinates object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": "The callback function that generates the SVG path coordinates for the links, given a coordinates object."
    },
    "params": []
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "_linkEnter",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_linkEnter",
    "access": "private",
    "description": "Defines how to create the links for newly\nadded data objects.",
    "lineNumber": 189,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "The original data object that the links are being drawn for."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "linkEnter",
        "description": "The D3 Enter selection of links."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "links",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "linkPathGenerator",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "_linkUpdate",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_linkUpdate",
    "access": "private",
    "description": "Defines how to update the links for the\ndata objects.",
    "lineNumber": 204,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "The original data object that the links are being drawn for."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "linkUpdate",
        "description": "The D3 Update selection of links."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "linkUpdateTransition",
        "description": "The D3 transition object for the D3 Update selection of links."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "links",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "linkPathGenerator",
        "description": "The link path generator function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "_linkExit",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_linkExit",
    "access": "private",
    "description": "Defines how to remove the links for the\nremoved data objects.",
    "lineNumber": 219,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "The original data object that the links are being drawn for."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "linkExit",
        "description": "The D3 Exit selection of links."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "linkExitTransition",
        "description": "The D3 transition object for the D3 Update selection of links."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "links",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "linkPathGenerator",
        "description": "The link path generator function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "_getNodeSize",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_getNodeSize",
    "access": "private",
    "description": "Called when updating dimensions when\nnode settings is configured to be\n'nodesize'.",
    "lineNumber": 230,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number[]} An array with two values, representing the height and width of the node respectively."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": "An array with two values, representing the height and width of the node respectively."
    },
    "params": []
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "focusToNode",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#focusToNode",
    "access": "public",
    "description": "Focuses and expands all the way through to a node.",
    "lineNumber": 240,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "idOrNodeDataItem",
        "description": "The id of the node to focus, or the node data item object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "on",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#on",
    "access": "public",
    "description": "Attaches a handler to the event.\nNote you can only attach one handler\nto an event at this stage.",
    "lineNumber": 286,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The event name."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": "A callback function that executes when the event is triggerred."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "[\"on\" + pascalCasedEventName]",
    "memberof": "js/BaseTree.js~BaseTree",
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#[\"on\" + pascalCasedEventName]",
    "access": "public",
    "description": null,
    "lineNumber": 290,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "emit",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#emit",
    "access": "public",
    "description": "Triggers all handlers associated with an event.",
    "lineNumber": 301,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*} The returned value of the triggered handler."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The event name."
      },
      {
        "nullable": null,
        "types": [
          "...object"
        ],
        "spread": true,
        "optional": true,
        "name": "args",
        "description": "The arguments supplied to the event."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The returned value of the triggered handler."
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "getIsFlatData",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#getIsFlatData",
    "access": "public",
    "description": "Returns a boolean whether the\ntree is using flat data or not.",
    "lineNumber": 316,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Whether the tree is using flat data or not."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether the tree is using flat data or not."
    },
    "params": []
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "setIsFlatData",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#setIsFlatData",
    "access": "public",
    "description": "Sets the is flat data flag.\nIf set to true, you must specify\nthe `getParentId` option.",
    "lineNumber": 327,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "newIsFlatData",
        "description": "Whether the tree is using flat data or not."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "member",
    "name": "_isFlatData",
    "memberof": "js/BaseTree.js~BaseTree",
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_isFlatData",
    "access": "private",
    "description": null,
    "lineNumber": 328,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "regenerateNodeData",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#regenerateNodeData",
    "access": "public",
    "description": "Regenerates the node data.",
    "lineNumber": 337,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    },
    "params": []
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "getTheme",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#getTheme",
    "access": "public",
    "description": "Gets the tree theme.",
    "lineNumber": 376,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The theme the tree is using."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The theme the tree is using."
    },
    "params": []
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "setTheme",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#setTheme",
    "access": "public",
    "description": "Sets the tree theme.",
    "lineNumber": 386,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "theme",
        "description": "The theme to set the tree to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 85,
    "kind": "member",
    "name": "_theme",
    "memberof": "js/BaseTree.js~BaseTree",
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_theme",
    "access": "private",
    "description": null,
    "lineNumber": 387,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "getOrientation",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#getOrientation",
    "access": "public",
    "description": "Gets the tree orientation.",
    "lineNumber": 396,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The orientation the tree is using."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The orientation the tree is using."
    },
    "params": []
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "setOrientation",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#setOrientation",
    "access": "public",
    "description": "Sets the tree orientation.",
    "lineNumber": 406,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "orientation",
        "description": "The orientation to set the tree to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 88,
    "kind": "member",
    "name": "_orientation",
    "memberof": "js/BaseTree.js~BaseTree",
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_orientation",
    "access": "private",
    "description": null,
    "lineNumber": 407,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "getData",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#getData",
    "access": "public",
    "description": "Gets the data items used to render\nthe nodes.",
    "lineNumber": 417,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object[]} The array of data items the tree uses."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object[]"
      ],
      "spread": false,
      "description": "The array of data items the tree uses."
    },
    "params": []
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "setData",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#setData",
    "access": "public",
    "description": "Sets the data items the tree should\nuse to render the nodes.",
    "lineNumber": 428,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "The new set of data items."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 91,
    "kind": "member",
    "name": "_data",
    "memberof": "js/BaseTree.js~BaseTree",
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_data",
    "access": "private",
    "description": null,
    "lineNumber": 429,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "getNodeDepthMultiplier",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#getNodeDepthMultiplier",
    "access": "public",
    "description": "Gets the node depth multiplier that\naffects the distance between the\nparent node and the child node.",
    "lineNumber": 440,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The node depth multiplier value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The node depth multiplier value"
    },
    "params": []
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "setNodeDepthMultiplier",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#setNodeDepthMultiplier",
    "access": "public",
    "description": "Sets the node depth multiplier value.",
    "lineNumber": 450,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "newNodeDepthMultiplier",
        "description": "The value that affects the distance between the parent node and the child node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 94,
    "kind": "member",
    "name": "_nodeDepthMultiplier",
    "memberof": "js/BaseTree.js~BaseTree",
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_nodeDepthMultiplier",
    "access": "private",
    "description": null,
    "lineNumber": 451,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "getDuration",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#getDuration",
    "access": "public",
    "description": "Gets the duration of animations\nfor the tree.",
    "lineNumber": 461,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The animation duration in milliseconds."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The animation duration in milliseconds."
    },
    "params": []
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "setDuration",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#setDuration",
    "access": "public",
    "description": "Sets the duration of animations\nfor the tree.",
    "lineNumber": 472,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newDuration",
        "description": "The animation duration in milliseconds."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 97,
    "kind": "member",
    "name": "_duration",
    "memberof": "js/BaseTree.js~BaseTree",
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_duration",
    "access": "private",
    "description": null,
    "lineNumber": 473,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "getAllowPan",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#getAllowPan",
    "access": "public",
    "description": "Gets the boolean value indicating\nwhether the drag-to-pan pan feature\nis enabled or not.",
    "lineNumber": 484,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Whether panning is enabled or not."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether panning is enabled or not."
    },
    "params": []
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "setAllowPan",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#setAllowPan",
    "access": "public",
    "description": "Sets the boolean value indicating\nwhether the drag-to-pan pan feature\nis enabled or not.",
    "lineNumber": 496,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newAllowPan",
        "description": "Whether panning is enabled or not."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 100,
    "kind": "member",
    "name": "_allowPan",
    "memberof": "js/BaseTree.js~BaseTree",
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_allowPan",
    "access": "private",
    "description": null,
    "lineNumber": 497,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "getAllowZoom",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#getAllowZoom",
    "access": "public",
    "description": "Gets the boolean value indicating\nwhether the mouse wheel to zoom in/out\nfeature is enabled or not.",
    "lineNumber": 508,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Whether zooming is enabled or not."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether zooming is enabled or not."
    },
    "params": []
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "setAllowZoom",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#setAllowZoom",
    "access": "public",
    "description": "Sets the boolean value indicating\nwhether the mouse wheel to zoom in/out\nfeature is enabled or not.",
    "lineNumber": 520,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "newAllowZoom",
        "description": "Whether zooming is enabled or not."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 103,
    "kind": "member",
    "name": "_allowZoom",
    "memberof": "js/BaseTree.js~BaseTree",
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_allowZoom",
    "access": "private",
    "description": null,
    "lineNumber": 521,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "getAllowFocus",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#getAllowFocus",
    "access": "public",
    "description": "Gets the boolean value indicating\nwhether to focus to the clicked node\nor not. Focusing on a node would hide\nall irrelevant nodes that's not a \nparent, sibling or ancestor of the\nclicked node.",
    "lineNumber": 535,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Whether to focus to the clicked node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether to focus to the clicked node."
    },
    "params": []
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "setAllowFocus",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#setAllowFocus",
    "access": "public",
    "description": "Sets the boolean value indicating\nwhether to pan to the clicked node\nfeature is enabled or not.",
    "lineNumber": 547,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "newAllowFocus",
        "description": "Whether to pan to the clicked node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 106,
    "kind": "member",
    "name": "_allowFocus",
    "memberof": "js/BaseTree.js~BaseTree",
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_allowFocus",
    "access": "private",
    "description": null,
    "lineNumber": 548,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "getAllowNodeCentering",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#getAllowNodeCentering",
    "access": "public",
    "description": "Gets the boolean value indicating\nwhether to pan to a clicked node.",
    "lineNumber": 558,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Whether to pan to the clicked node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether to pan to the clicked node."
    },
    "params": []
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "setAllowNodeCentering",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#setAllowNodeCentering",
    "access": "public",
    "description": "Whether to pan to a clicked node.",
    "lineNumber": 568,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "newAllowNodeCentering",
        "description": "Whether to pan to the clicked node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 109,
    "kind": "member",
    "name": "_allowNodeCentering",
    "memberof": "js/BaseTree.js~BaseTree",
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_allowNodeCentering",
    "access": "private",
    "description": null,
    "lineNumber": 569,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "getMinScale",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#getMinScale",
    "access": "public",
    "description": "Gets the minimum zoom scaling.",
    "lineNumber": 578,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The minimum zoom scale value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The minimum zoom scale value."
    },
    "params": []
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "setMinScale",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#setMinScale",
    "access": "public",
    "description": "Sets the minimum zoom scaling.",
    "lineNumber": 588,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newMinScale",
        "description": "The minimum zoom scale value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 112,
    "kind": "member",
    "name": "_minScale",
    "memberof": "js/BaseTree.js~BaseTree",
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_minScale",
    "access": "private",
    "description": null,
    "lineNumber": 589,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "getMaxScale",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#getMaxScale",
    "access": "public",
    "description": "Gets the maximum zoom scaling.",
    "lineNumber": 598,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Maximum zoom scale value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Maximum zoom scale value."
    },
    "params": []
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "setMaxScale",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#setMaxScale",
    "access": "public",
    "description": "Sets the maximum zoom scaling.",
    "lineNumber": 608,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newMaxScale",
        "description": "The maximum zoom scale value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 115,
    "kind": "member",
    "name": "_maxScale",
    "memberof": "js/BaseTree.js~BaseTree",
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_maxScale",
    "access": "private",
    "description": null,
    "lineNumber": 609,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "getLoadOnDemandSettings",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#getLoadOnDemandSettings",
    "access": "public",
    "description": "Gets the load on demand settings object.",
    "lineNumber": 618,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{LoadOnDemandSettings} The load on demand settings."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "LoadOnDemandSettings"
      ],
      "spread": false,
      "description": "The load on demand settings."
    },
    "params": []
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "getNodeSettings",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#getNodeSettings",
    "access": "public",
    "description": "Gets the node settings object.",
    "lineNumber": 627,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{NodeSettings} The node settings."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "NodeSettings"
      ],
      "spread": false,
      "description": "The node settings."
    },
    "params": []
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "getElement",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#getElement",
    "access": "public",
    "description": "Gets the container DOM element.",
    "lineNumber": 636,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The container DOM element."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The container DOM element."
    },
    "params": []
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "setElement",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#setElement",
    "access": "public",
    "description": "Sets the container DOM element",
    "lineNumber": 646,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "newElement",
        "description": "The container DOM element."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 120,
    "kind": "member",
    "name": "_element",
    "memberof": "js/BaseTree.js~BaseTree",
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_element",
    "access": "private",
    "description": null,
    "lineNumber": 647,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "getRoot",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#getRoot",
    "access": "public",
    "description": "Gets the root node object.",
    "lineNumber": 656,
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The root D3 tree node object."
    },
    "params": []
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "getSvg",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#getSvg",
    "access": "public",
    "description": "Gets the D3 selection object for the SVG element.",
    "lineNumber": 665,
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "Returns the D3 selection object."
    },
    "params": []
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "getView",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#getView",
    "access": "public",
    "description": "Gets the D3 selection object for the view element.",
    "lineNumber": 674,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} D3 selection object for the view element."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "D3 selection object for the view element."
    },
    "params": []
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "getPanningContainer",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#getPanningContainer",
    "access": "public",
    "description": "Gets the D3 selection object for the\npanning container element.",
    "lineNumber": 684,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} D3 selection object for the panning container element."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "D3 selection object for the panning container element."
    },
    "params": []
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "getTreeGenerator",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#getTreeGenerator",
    "access": "public",
    "description": "Gets the D3 generator object used to\ngenerate the tree nodes coordinates.",
    "lineNumber": 694,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{function} D3 tree generator object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": "D3 tree generator object."
    },
    "params": []
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "getNode",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#getNode",
    "access": "public",
    "description": "Get a single node given an id or a data item.",
    "lineNumber": 704,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} D3 tree node data item."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*",
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "idOrDataItem",
        "description": "The ID or data item to retrieve the D3 tree node data item with."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "D3 tree node data item."
    }
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "getDataItem",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#getDataItem",
    "access": "public",
    "description": "Get a single data item given an id.",
    "lineNumber": 725,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The data item with the given ID."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The ID to retrieve the data item with."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The data item with the given ID."
    }
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "getNodes",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#getNodes",
    "access": "public",
    "description": "Get the array of D3 node data items\nthe D3 tree has generated.",
    "lineNumber": 736,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object[]} Array of D3 node data items."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object[]"
      ],
      "spread": false,
      "description": "Array of D3 node data items."
    },
    "params": []
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "getVisibleNodes",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#getVisibleNodes",
    "access": "public",
    "description": "Get the array of visible D3 node\ndata items the D3 tree has generated.",
    "lineNumber": 746,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object[]} Array of D3 node data items."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object[]"
      ],
      "spread": false,
      "description": "Array of D3 node data items."
    },
    "params": []
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "getLinks",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#getLinks",
    "access": "public",
    "description": "Get the array of D3 link data items\nthe D3 tree has generated.",
    "lineNumber": 756,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object[]} Array of D3 link data items."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object[]"
      ],
      "spread": false,
      "description": "Array of D3 link data items."
    },
    "params": []
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "getZoomListener",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#getZoomListener",
    "access": "public",
    "description": "Gets the D3 zoom listener used for\nthe panning, zooming and focus features.",
    "lineNumber": 766,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{function} The D3 zoom listener"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": "The D3 zoom listener"
    },
    "params": []
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "getId",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#getId",
    "access": "public",
    "description": "Gets the ID for a given data item.",
    "lineNumber": 776,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*} The ID for the given data item."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "dataItem",
        "description": "The data item to get the ID from."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The ID for the given data item."
    }
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "getChildren",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#getChildren",
    "access": "public",
    "description": "Gets the children data items for a given data item.",
    "lineNumber": 786,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object[]} The array of child data items."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "dataItem",
        "description": "The data item to get the children data items from."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object[]"
      ],
      "spread": false,
      "description": "The array of child data items."
    }
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "getParentId",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#getParentId",
    "access": "public",
    "description": "Gets the parent ID for a given data item.",
    "lineNumber": 796,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*} The parent ID for the given data item."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "dataItem",
        "description": "The data item to get the parent ID from."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The parent ID for the given data item."
    }
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "setIdAccessor",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#setIdAccessor",
    "access": "public",
    "description": "Sets the ID accessor callback function,\ndefining how to get a unique ID from a\ngiven data item.",
    "lineNumber": 808,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "getIdCallBack"
        ],
        "spread": false,
        "optional": false,
        "name": "newIdAccessor",
        "description": "Callback function to get the ID for a given data item."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "setChildrenAccessor",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#setChildrenAccessor",
    "access": "public",
    "description": "Sets the children accessor callback function,\ndefining how to get the children data items\nfrom a given data item.",
    "lineNumber": 821,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "getChildrenCallBack"
        ],
        "spread": false,
        "optional": false,
        "name": "newChildrenAccessor",
        "description": "Callback function to get the children for a given data item."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "setParentIdAccessor",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#setParentIdAccessor",
    "access": "public",
    "description": "Sets the parent ID accessor callback function,\ndefining how to get the parent ID from a\ngiven data item.",
    "lineNumber": 834,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "getParentIdCallBack"
        ],
        "spread": false,
        "optional": false,
        "name": "newParentIdAccessor",
        "description": "Callback function to get the parent id for a given data item."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "getWidth",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#getWidth",
    "access": "public",
    "description": "Gets the width of SVG, including the margins.",
    "lineNumber": 844,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The width of the SVG."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The width of the SVG."
    },
    "params": []
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "getHeight",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#getHeight",
    "access": "public",
    "description": "Gets the height of SVG, including the margins.",
    "lineNumber": 853,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The height of the SVG."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The height of the SVG."
    },
    "params": []
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "setMargins",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#setMargins",
    "access": "public",
    "description": "Sets the margins for the tree diagram.",
    "lineNumber": 867,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "newMargins",
        "description": "The margin object."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "newMargins.top",
        "description": "The margin top for the tree diagram."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "newMargins.right",
        "description": "The margin right for the tree diagram."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "newMargins.bottom",
        "description": "The margin bottom for the tree diagram."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "newMargins.left",
        "description": "The margin left for the tree diagram."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 144,
    "kind": "member",
    "name": "_margins",
    "memberof": "js/BaseTree.js~BaseTree",
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_margins",
    "access": "private",
    "description": null,
    "lineNumber": 868,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "getMargins",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#getMargins",
    "access": "public",
    "description": "Gets the margins for the tree diagram.",
    "lineNumber": 877,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The margins object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The margins object."
    },
    "params": []
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "setWidthWithoutMargins",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#setWidthWithoutMargins",
    "access": "public",
    "description": "Sets the width of the SVG for the tree diagram.",
    "lineNumber": 887,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newWidthWithoutMargin",
        "description": "The width of SVG for the tree diagram."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 147,
    "kind": "member",
    "name": "_widthWithoutMargin",
    "memberof": "js/BaseTree.js~BaseTree",
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_widthWithoutMargin",
    "access": "private",
    "description": null,
    "lineNumber": 888,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "getWidthWithoutMargins",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#getWidthWithoutMargins",
    "access": "public",
    "description": "Gets the width of the SVG for the tree diagram.\nDoes not include the margins.",
    "lineNumber": 898,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The width (not including the margins) of the SVG for the tree diagram."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The width (not including the margins) of the SVG for the tree diagram."
    },
    "params": []
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "setHeightWithoutMargins",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#setHeightWithoutMargins",
    "access": "public",
    "description": "Sets the height of the SVG for the tree diagram.",
    "lineNumber": 908,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newHeightWithoutMargin",
        "description": "The height of SVG for the tree diagram."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 150,
    "kind": "member",
    "name": "_heightWithoutMargin",
    "memberof": "js/BaseTree.js~BaseTree",
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_heightWithoutMargin",
    "access": "private",
    "description": null,
    "lineNumber": 909,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "getHeightWithoutMargins",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#getHeightWithoutMargins",
    "access": "public",
    "description": "Gets the height of the SVG for the tree diagram.\nDoes not include the margins.",
    "lineNumber": 919,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The height (not including the margins) of the SVG for the tree diagram."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The height (not including the margins) of the SVG for the tree diagram."
    },
    "params": []
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "updateDimensions",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#updateDimensions",
    "access": "public",
    "description": "Updates the dimensions of the SVG.",
    "lineNumber": 928,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    },
    "params": []
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "validateSettings",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#validateSettings",
    "access": "public",
    "description": "Validates the settings to ensure the\ntree diagram is ready to be generated.",
    "lineNumber": 1012,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    },
    "params": []
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "initialize",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#initialize",
    "access": "public",
    "description": "Creates and set up the the tree diagram.",
    "lineNumber": 1031,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    },
    "params": []
  },
  {
    "__docId__": 156,
    "kind": "member",
    "name": "_view",
    "memberof": "js/BaseTree.js~BaseTree",
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_view",
    "access": "private",
    "description": null,
    "lineNumber": 1049,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 158,
    "kind": "member",
    "name": "_panningContainer",
    "memberof": "js/BaseTree.js~BaseTree",
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_panningContainer",
    "access": "private",
    "description": null,
    "lineNumber": 1056,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "member",
    "name": "_zoomListener",
    "memberof": "js/BaseTree.js~BaseTree",
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_zoomListener",
    "access": "private",
    "description": null,
    "lineNumber": 1059,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "expand",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#expand",
    "access": "public",
    "description": "Expands the given node data item.",
    "lineNumber": 1113,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeDataItem",
        "description": "The D3 node data item to expand."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "expandRecursively",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#expandRecursively",
    "access": "public",
    "description": "Expands the given node data item,\nand its children and descendants.",
    "lineNumber": 1125,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeDataItem",
        "description": "The D3 node data item to expand."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "collapse",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#collapse",
    "access": "public",
    "description": "Collapses the given node data item.",
    "lineNumber": 1142,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeDataItem",
        "description": "The D3 node data item to collapse."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "collapseRecursively",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#collapseRecursively",
    "access": "public",
    "description": "Collapses the given node data item,\nand its children and descendants.",
    "lineNumber": 1154,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeDataItem",
        "description": "The D3 node data item to collapse."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "_populateUnderlyingChildren",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_populateUnderlyingChildren",
    "access": "private",
    "description": "Populates the node's children to a hidden property.",
    "lineNumber": 1171,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeDataItem",
        "description": "The D3 node data item to collapse."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "removeSelection",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#removeSelection",
    "access": "public",
    "description": "Remove node selections for a given node and it's children.",
    "lineNumber": 1188,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeDataItem",
        "description": "The D3 node data item to remove selection from."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "centerNode",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#centerNode",
    "access": "public",
    "description": "Center the view to a D3 tree node.",
    "lineNumber": 1205,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeDataItem",
        "description": "The D3 node data item to focus on."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "_onNodeClick",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_onNodeClick",
    "access": "private",
    "description": "Triggers the nodeClick event when a\nD3 node is clicked on, and proceeds\nto focus/expand/collapse the node.",
    "lineNumber": 1241,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} True meaning it successfully focused/expanded/collapsed a node. False otherwise."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeDataItem",
        "description": "The D3 node data item that was clicked."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "The index of the D3 node being clicked in the array of siblings."
      },
      {
        "nullable": null,
        "types": [
          "object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "Array of siblings D3 node, inclusive of the clicked node data item itself."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True meaning it successfully focused/expanded/collapsed a node. False otherwise."
    }
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "_createNode",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_createNode",
    "access": "private",
    "description": "Creates a child D3 tree node.",
    "lineNumber": 1260,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The newly created D3 node;"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "parentNodeDataItem",
        "description": "The parent D3 tree node data item."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "dataItem",
        "description": "The data item."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The newly created D3 node;"
    }
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "_addUnderlyingChildNode",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_addUnderlyingChildNode",
    "access": "private",
    "description": "Creates and adds a child D3 tree\nnode to a given parent D3 tree node.",
    "lineNumber": 1280,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The newly created and added D3 node;"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "parentNodeDataItem",
        "description": "The parent D3 tree node data item."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "dataItem",
        "description": "The data item."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The newly created and added D3 node;"
    }
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "_processLoadedDataForNodeFocus",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_processLoadedDataForNodeFocus",
    "access": "private",
    "description": "Process the loaded data from AJAX\nresulting from a node expand.",
    "lineNumber": 1294,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeDataItem",
        "description": "The D3 node data item being expanded."
      },
      {
        "nullable": null,
        "types": [
          "object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "result",
        "description": "The children data items to process."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "nodeFocus",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#nodeFocus",
    "access": "public",
    "description": "Focuses to a node, given a node data item.",
    "lineNumber": 1320,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeDataItem",
        "description": "The node being focused on."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "_processLoadedDataForNodeToggle",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_processLoadedDataForNodeToggle",
    "access": "private",
    "description": "Process the loaded data from AJAX\nresulting from a node toggle.",
    "lineNumber": 1351,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeDataItem",
        "description": "The D3 node data item."
      },
      {
        "nullable": null,
        "types": [
          "object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "result",
        "description": "Array of sibling node data items, inclusive the node being toggled."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "nodeToggle",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#nodeToggle",
    "access": "public",
    "description": "Toggles the children visibility for a given node data item.",
    "lineNumber": 1369,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeDataItem",
        "description": "D3 Node data item."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "hideSiblings",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#hideSiblings",
    "access": "public",
    "description": "Hide the siblings nodes\nfor a given node.",
    "lineNumber": 1398,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeDataItem",
        "description": "The D3 node to hide siblings for."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "updateTreeWithFocusOnNode",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#updateTreeWithFocusOnNode",
    "access": "public",
    "description": "Updates the tree diagram so only the relevant\nfocused node and direct parent hierarchies are\nshown.",
    "lineNumber": 1418,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeDataItem",
        "description": "D3 Node data item."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "_updateNodes",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_updateNodes",
    "access": "private",
    "description": "Updates the tree nodes given\na D3 tree node.",
    "lineNumber": 1451,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeDataItem",
        "description": "The D3 node data item to update."
      },
      {
        "nullable": null,
        "types": [
          "object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "nodes",
        "description": "Array of D3 node data items."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "_updateLinks",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_updateLinks",
    "access": "private",
    "description": "Updates the tree node links given\na D3 tree node.",
    "lineNumber": 1517,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeDataItem",
        "description": "The D3 node data item."
      },
      {
        "nullable": null,
        "types": [
          "object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "links",
        "description": "Array of D3 link data items."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "update",
    "memberof": "js/BaseTree.js~BaseTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#update",
    "access": "public",
    "description": "Updates the tree given a D3 tree node.",
    "lineNumber": 1558,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeDataItem",
        "description": "The D3 node data item."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 180,
    "kind": "member",
    "name": "_nodes",
    "memberof": "js/BaseTree.js~BaseTree",
    "static": false,
    "longname": "js/BaseTree.js~BaseTree#_nodes",
    "access": "private",
    "description": null,
    "lineNumber": 1563,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "file",
    "name": "js/BoxedNodeSettings.js",
    "content": "import NodeSettings from './NodeSettings';\r\n\r\nclass BoxedNodeSettings extends NodeSettings {\r\n    /**\r\n     * @param {object} ownerObject The owner object.\r\n     * @param {object} options The options object.\r\n     * @param {number} [options.bodyBoxWidth=200] Body box width.\r\n     * @param {number} [options.bodyBoxHeight=75] Body box height.\r\n     * @param {object} [options.bodyBoxPadding] Body box padding object.\r\n     * @param {number} [options.bodyBoxPadding.top=5] Body box padding top.\r\n     * @param {number} [options.bodyBoxPadding.right=10] Body box padding right.\r\n     * @param {number} [options.bodyBoxPadding.bottom=5] Body box padding bottom.\r\n     * @param {number} [options.bodyBoxPadding.left=10] Body box padding left.\r\n     * @param {number} [options.titleBoxWidth] Title box width.\r\n     * @param {number} [options.titleBoxHeight=40] Title box height.\r\n     * @param {object} [options.titleBoxPadding] Title box padding object.\r\n     * @param {number} [options.titleBoxPadding.top=2] Title box padding top.\r\n     * @param {number} [options.titleBoxPadding.right=5] Title box padding right.\r\n     * @param {number} [options.titleBoxPadding.bottom=2] Title box padding bottom.\r\n     * @param {number} [options.titleBoxPadding.left=5] Title box padding left.\r\n     */\r\n    constructor(ownerObject, options) {\r\n        super(ownerObject, options);\r\n\r\n        var mergedOptions = {\r\n            ...BoxedNodeSettings.defaults,\r\n            ...options\r\n        };\r\n\r\n        this._bodyBoxWidth = mergedOptions.bodyBoxWidth;\r\n        this._bodyBoxHeight = mergedOptions.bodyBoxHeight;\r\n        this._bodyBoxPadding = mergedOptions.bodyBoxPadding;\r\n        this._titleBoxWidth = mergedOptions.titleBoxWidth;\r\n        this._titleBoxHeight = mergedOptions.titleBoxHeight;\r\n        this._titleBoxPadding = mergedOptions.titleBoxPadding;\r\n    }\r\n\r\n    /**\r\n     * Gets the body box width value.\r\n     * \r\n     * @returns {number} The body box width value.\r\n     */\r\n    getBodyBoxWidth() {\r\n        return this._bodyBoxWidth;\r\n    }\r\n\r\n    /**\r\n     * Sets the body box width value.\r\n     * \r\n     * @param {number} width The body box width value.\r\n     * @returns {object} The node settings object.\r\n     */\r\n    setBodyBoxWidth(width) {\r\n        this._bodyBoxWidth = width;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the body box height value.\r\n     * \r\n     * @returns {number} The body box height value.\r\n     */\r\n    getBodyBoxHeight() {\r\n        return this._bodyBoxHeight;\r\n    }\r\n\r\n    /**\r\n     * Sets the body box height value.\r\n     * \r\n     * @param {number} height The body box height value.\r\n     * @returns {object} The node settings object.\r\n     */\r\n    setBodyBoxHeight(height) {\r\n        this._bodyBoxHeight = height;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the body box padding values.\r\n     * \r\n     * @param {object} newPadding The body box padding object value.\r\n     * @param {number} newPadding.top The body box padding top value.\r\n     * @param {number} newPadding.right The body box padding right value.\r\n     * @param {number} newPadding.bottom The body box padding bottom value.\r\n     * @param {number} newPadding.left The body box padding left value.\r\n     * @returns {object} The node settings object.\r\n     */\r\n    setBodyBoxPadding(newPadding) {\r\n        this._bodyBoxPadding = newPadding;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the body box padding values.\r\n     * \r\n     * @returns {object} The body box padding object.\r\n     */\r\n    getBodyBoxPadding() {\r\n        return this._bodyBoxPadding;\r\n    }\r\n\r\n    /**\r\n     * Gets the title box width value.\r\n     * \r\n     * @returns {number} The title box width value.\r\n     */\r\n    getTitleBoxWidth() {\r\n        if (this._titleBoxWidth)\r\n            return this._titleBoxWidth;\r\n        else\r\n            return this.getBodyBoxWidth() / 2;\r\n    }\r\n\r\n    /**\r\n     * Sets the title box width value.\r\n     * \r\n     * @param {number} width The title box width value.\r\n     * @returns {object} The node settings object.\r\n     */\r\n    setTitleBoxWidth(width) {\r\n        this._titleBoxWidth = width;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the title box height value.\r\n     * \r\n     * @returns {number} The title box height value.\r\n     */\r\n    getTitleBoxHeight() {\r\n        return this._titleBoxHeight;\r\n    }\r\n\r\n    /**\r\n     * Sets the title box height value.\r\n     * \r\n     * @param {number} height The title box height value.\r\n     * @returns {object} The node settings object.\r\n     */\r\n    setTitleBoxHeight(height) {\r\n        this._titleBoxHeight = height;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the title box padding values.\r\n     * \r\n     * @returns {object} The title box padding object.\r\n     */\r\n    getTitleBoxPadding() {\r\n        return this._titleBoxPadding;\r\n    }\r\n    \r\n    /**\r\n     * Sets the title box padding values.\r\n     * \r\n     * @param {object} newPadding The body box padding object value.\r\n     * @param {number} newPadding.top The body box padding top value.\r\n     * @param {number} newPadding.right The body box padding right value.\r\n     * @param {number} newPadding.bottom The body box padding bottom value.\r\n     * @param {number} newPadding.left The body box padding left value.\r\n     * @returns {object} The node settings object.\r\n     */\r\n    setTitleBoxPadding(newPadding) {\r\n        this._titleBoxPadding = newPadding;\r\n        return this;\r\n    }\r\n}\r\n\r\nBoxedNodeSettings.defaults = {\r\n    bodyBoxWidth: 200,\r\n    bodyBoxHeight: 75,\r\n    bodyBoxPadding: {\r\n        top: 5,\r\n        right: 10,\r\n        bottom: 5,\r\n        left: 10\r\n    },\r\n    titleBoxWidth: null,\r\n    titleBoxHeight: 40,\r\n    titleBoxPadding: {\r\n        top: 2,\r\n        right: 5,\r\n        bottom: 2,\r\n        left: 5\r\n    },\r\n}\r\n\r\nexport default BoxedNodeSettings;",
    "static": true,
    "longname": "D:/Git Repositories/Packages/d3-mitch-tree/src/js/BoxedNodeSettings.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 183,
    "kind": "class",
    "name": "BoxedNodeSettings",
    "memberof": "js/BoxedNodeSettings.js",
    "static": true,
    "longname": "js/BoxedNodeSettings.js~BoxedNodeSettings",
    "access": "public",
    "export": true,
    "importPath": "d3-mitch-tree/js/BoxedNodeSettings.js",
    "importStyle": "BoxedNodeSettings",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "js/NodeSettings.js~NodeSettings"
    ]
  },
  {
    "__docId__": 184,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/BoxedNodeSettings.js~BoxedNodeSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BoxedNodeSettings.js~BoxedNodeSettings#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "ownerObject",
        "description": "The owner object."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options object."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "200",
        "defaultRaw": 200,
        "name": "options.bodyBoxWidth",
        "description": "Body box width."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "75",
        "defaultRaw": 75,
        "name": "options.bodyBoxHeight",
        "description": "Body box height."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "options.bodyBoxPadding",
        "description": "Body box padding object."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "5",
        "defaultRaw": 5,
        "name": "options.bodyBoxPadding.top",
        "description": "Body box padding top."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "10",
        "defaultRaw": 10,
        "name": "options.bodyBoxPadding.right",
        "description": "Body box padding right."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "5",
        "defaultRaw": 5,
        "name": "options.bodyBoxPadding.bottom",
        "description": "Body box padding bottom."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "10",
        "defaultRaw": 10,
        "name": "options.bodyBoxPadding.left",
        "description": "Body box padding left."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.titleBoxWidth",
        "description": "Title box width."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "40",
        "defaultRaw": 40,
        "name": "options.titleBoxHeight",
        "description": "Title box height."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "options.titleBoxPadding",
        "description": "Title box padding object."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "options.titleBoxPadding.top",
        "description": "Title box padding top."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "5",
        "defaultRaw": 5,
        "name": "options.titleBoxPadding.right",
        "description": "Title box padding right."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "options.titleBoxPadding.bottom",
        "description": "Title box padding bottom."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "5",
        "defaultRaw": 5,
        "name": "options.titleBoxPadding.left",
        "description": "Title box padding left."
      }
    ]
  },
  {
    "__docId__": 185,
    "kind": "member",
    "name": "_bodyBoxWidth",
    "memberof": "js/BoxedNodeSettings.js~BoxedNodeSettings",
    "static": false,
    "longname": "js/BoxedNodeSettings.js~BoxedNodeSettings#_bodyBoxWidth",
    "access": "private",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "member",
    "name": "_bodyBoxHeight",
    "memberof": "js/BoxedNodeSettings.js~BoxedNodeSettings",
    "static": false,
    "longname": "js/BoxedNodeSettings.js~BoxedNodeSettings#_bodyBoxHeight",
    "access": "private",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "member",
    "name": "_bodyBoxPadding",
    "memberof": "js/BoxedNodeSettings.js~BoxedNodeSettings",
    "static": false,
    "longname": "js/BoxedNodeSettings.js~BoxedNodeSettings#_bodyBoxPadding",
    "access": "private",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "member",
    "name": "_titleBoxWidth",
    "memberof": "js/BoxedNodeSettings.js~BoxedNodeSettings",
    "static": false,
    "longname": "js/BoxedNodeSettings.js~BoxedNodeSettings#_titleBoxWidth",
    "access": "private",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "member",
    "name": "_titleBoxHeight",
    "memberof": "js/BoxedNodeSettings.js~BoxedNodeSettings",
    "static": false,
    "longname": "js/BoxedNodeSettings.js~BoxedNodeSettings#_titleBoxHeight",
    "access": "private",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "member",
    "name": "_titleBoxPadding",
    "memberof": "js/BoxedNodeSettings.js~BoxedNodeSettings",
    "static": false,
    "longname": "js/BoxedNodeSettings.js~BoxedNodeSettings#_titleBoxPadding",
    "access": "private",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "getBodyBoxWidth",
    "memberof": "js/BoxedNodeSettings.js~BoxedNodeSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BoxedNodeSettings.js~BoxedNodeSettings#getBodyBoxWidth",
    "access": "public",
    "description": "Gets the body box width value.",
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The body box width value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The body box width value."
    },
    "params": []
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "setBodyBoxWidth",
    "memberof": "js/BoxedNodeSettings.js~BoxedNodeSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BoxedNodeSettings.js~BoxedNodeSettings#setBodyBoxWidth",
    "access": "public",
    "description": "Sets the body box width value.",
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The node settings object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "The body box width value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The node settings object."
    }
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "getBodyBoxHeight",
    "memberof": "js/BoxedNodeSettings.js~BoxedNodeSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BoxedNodeSettings.js~BoxedNodeSettings#getBodyBoxHeight",
    "access": "public",
    "description": "Gets the body box height value.",
    "lineNumber": 63,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The body box height value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The body box height value."
    },
    "params": []
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "setBodyBoxHeight",
    "memberof": "js/BoxedNodeSettings.js~BoxedNodeSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BoxedNodeSettings.js~BoxedNodeSettings#setBodyBoxHeight",
    "access": "public",
    "description": "Sets the body box height value.",
    "lineNumber": 73,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The node settings object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "The body box height value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The node settings object."
    }
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "setBodyBoxPadding",
    "memberof": "js/BoxedNodeSettings.js~BoxedNodeSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BoxedNodeSettings.js~BoxedNodeSettings#setBodyBoxPadding",
    "access": "public",
    "description": "Sets the body box padding values.",
    "lineNumber": 88,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The node settings object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "newPadding",
        "description": "The body box padding object value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "newPadding.top",
        "description": "The body box padding top value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "newPadding.right",
        "description": "The body box padding right value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "newPadding.bottom",
        "description": "The body box padding bottom value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "newPadding.left",
        "description": "The body box padding left value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The node settings object."
    }
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "getBodyBoxPadding",
    "memberof": "js/BoxedNodeSettings.js~BoxedNodeSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BoxedNodeSettings.js~BoxedNodeSettings#getBodyBoxPadding",
    "access": "public",
    "description": "Gets the body box padding values.",
    "lineNumber": 98,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The body box padding object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The body box padding object."
    },
    "params": []
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "getTitleBoxWidth",
    "memberof": "js/BoxedNodeSettings.js~BoxedNodeSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BoxedNodeSettings.js~BoxedNodeSettings#getTitleBoxWidth",
    "access": "public",
    "description": "Gets the title box width value.",
    "lineNumber": 107,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The title box width value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The title box width value."
    },
    "params": []
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "setTitleBoxWidth",
    "memberof": "js/BoxedNodeSettings.js~BoxedNodeSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BoxedNodeSettings.js~BoxedNodeSettings#setTitleBoxWidth",
    "access": "public",
    "description": "Sets the title box width value.",
    "lineNumber": 120,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The node settings object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "The title box width value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The node settings object."
    }
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "getTitleBoxHeight",
    "memberof": "js/BoxedNodeSettings.js~BoxedNodeSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BoxedNodeSettings.js~BoxedNodeSettings#getTitleBoxHeight",
    "access": "public",
    "description": "Gets the title box height value.",
    "lineNumber": 130,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The title box height value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The title box height value."
    },
    "params": []
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "setTitleBoxHeight",
    "memberof": "js/BoxedNodeSettings.js~BoxedNodeSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BoxedNodeSettings.js~BoxedNodeSettings#setTitleBoxHeight",
    "access": "public",
    "description": "Sets the title box height value.",
    "lineNumber": 140,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The node settings object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "The title box height value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The node settings object."
    }
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "getTitleBoxPadding",
    "memberof": "js/BoxedNodeSettings.js~BoxedNodeSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BoxedNodeSettings.js~BoxedNodeSettings#getTitleBoxPadding",
    "access": "public",
    "description": "Gets the title box padding values.",
    "lineNumber": 150,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The title box padding object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The title box padding object."
    },
    "params": []
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "setTitleBoxPadding",
    "memberof": "js/BoxedNodeSettings.js~BoxedNodeSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BoxedNodeSettings.js~BoxedNodeSettings#setTitleBoxPadding",
    "access": "public",
    "description": "Sets the title box padding values.",
    "lineNumber": 164,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The node settings object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "newPadding",
        "description": "The body box padding object value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "newPadding.top",
        "description": "The body box padding top value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "newPadding.right",
        "description": "The body box padding right value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "newPadding.bottom",
        "description": "The body box padding bottom value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "newPadding.left",
        "description": "The body box padding left value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The node settings object."
    }
  },
  {
    "__docId__": 209,
    "kind": "file",
    "name": "js/BoxedTree.js",
    "content": "import d3 from './CustomD3';\r\nimport {TextBox as d3PlusTextBox} from 'd3plus-text';\r\nimport BaseTree from './BaseTree';\r\nimport BoxedNodeSettings from './BoxedNodeSettings';\r\n\r\nclass BoxedTree extends BaseTree{\r\n    /** \r\n     * @param {object} options The options object.\r\n     * @param {bodyDisplayTextAccessorCallBack} options.getBodyDisplayText Determines how to obtain the body text to display for a node corresponding to a data item.\r\n     * @param {titleDisplayTextAccessorCallBack} options.getTitleDisplayText Determines how to obtain the title text to display for a node corresponding to a data item.\r\n    */\r\n    constructor(options) {\r\n        super(options);\r\n        var mergedOptions = {\r\n            ...BaseTree.defaults,\r\n            ...BoxedTree.defaults,\r\n            ...options\r\n        };\r\n\r\n        this._getBodyDisplayText = mergedOptions.getBodyDisplayText;\r\n        this._getTitleDisplayText = mergedOptions.getTitleDisplayText;\r\n        this.nodeSettings = new BoxedNodeSettings(this, mergedOptions.nodeSettings);\r\n    }\r\n\r\n    /** @inheritdoc */\r\n    initialize() {\r\n        super.initialize();\r\n\r\n        // Create the svg, and set its dimensions\r\n        this.getSvg().classed('boxed-tree', true);\r\n        return this;\r\n    }\r\n\r\n    /** @inheritdoc */\r\n    _nodeEnter(nodeEnter, nodes) {\r\n        var self = this;\r\n        // Declare box dimensions\r\n        var nodeBodyBoxWidth = self.nodeSettings.getBodyBoxWidth();\r\n        var nodeBodyBoxHeight = self.nodeSettings.getBodyBoxHeight();\r\n        var nodeBodyBoxPadding = self.nodeSettings.getBodyBoxPadding();\r\n\r\n        var nodeTitleBoxWidth = self.nodeSettings.getTitleBoxWidth();\r\n        var nodeTitleBoxHeight = self.nodeSettings.getTitleBoxHeight();\r\n        var nodeTitleBoxPadding = self.nodeSettings.getTitleBoxPadding();\r\n\r\n        /* Add Body Rectangle and Text for Node */\r\n        var bodyGroups = nodeEnter.append(\"g\")\r\n            .classed(\"body-group\", true);\r\n\r\n        bodyGroups.append(\"rect\")\r\n            .classed(\"body-box\", true)\r\n            .attr(\"width\", 1e-6)\r\n            .attr(\"height\", 1e-6);\r\n\r\n        bodyGroups.each(function(data, index, arr) {\r\n            var element = this;\r\n            var selection = d3.select(element);\r\n            var singledOutData = [];\r\n            singledOutData.push(data);\r\n\r\n            var recalculatedPaddingTop = nodeBodyBoxPadding.top;\r\n            if (self.getTitleDisplayText.call(self, data))\r\n            {\r\n                recalculatedPaddingTop += nodeTitleBoxHeight / 2;\r\n            }\r\n\r\n            // D3Plus Textbox with resizing capability\r\n            var d3PlusBodyTextBox = new d3PlusTextBox()\r\n                .select(element) // Sets the D3Plus code to append to the specified DOM element.\r\n                .data(singledOutData)\r\n                .text((data, index, arr) => {\r\n                    return self.getBodyDisplayText.call(self, data);\r\n                })\r\n                .textAnchor(\"middle\")\r\n                .verticalAlign(\"middle\")\r\n                .fontSize(13) // in pixels\r\n                .x(nodeBodyBoxPadding.left)\r\n                .y(recalculatedPaddingTop - nodeBodyBoxHeight / 2)\r\n                .width(nodeBodyBoxWidth - nodeBodyBoxPadding.left - nodeBodyBoxPadding.right)\r\n                .height(nodeBodyBoxHeight - recalculatedPaddingTop - nodeBodyBoxPadding.bottom)\r\n                .ellipsis((text, line) => {\r\n                    // If text was cut-off, add tooltip\r\n                    selection.append(\"title\")\r\n                        .text(self.getBodyDisplayText(data));\r\n                    return ((text.replace(/\\.|,$/g, \"\")) + \"...\");\r\n                })\r\n                .render();\r\n        });\r\n\r\n        /* Add Title Rectangle and Text for Node */\r\n        var titleGroups = nodeEnter.append(\"g\")\r\n            .classed(\"title-group\", true)\r\n            .attr(\"transform\", \"translate(\" + -nodeTitleBoxWidth / 3 + \", \" + (-nodeTitleBoxHeight / 2 - nodeBodyBoxHeight / 2) + \")\");\r\n\r\n        titleGroups.each(function(data, index, arr) {\r\n            if (!self.getTitleDisplayText.call(self, data))\r\n                return;\r\n            var element = this;\r\n            var selection = d3.select(element);\r\n            var singledOutData = [];\r\n            singledOutData.push(data);\r\n\r\n            selection.append(\"rect\")\r\n                .classed(\"title-box\", true)\r\n                .attr(\"width\", nodeTitleBoxWidth)\r\n                .attr(\"height\", nodeTitleBoxHeight);\r\n\r\n            // D3Plus Textbox with resizing capability\r\n            var d3PlusTitleTextBox = new d3PlusTextBox()\r\n                .select(element) // Sets the D3Plus code to append to the DOM element.\r\n                .data(singledOutData)\r\n                .text((data, index, arr) => {\r\n                    return self.getTitleDisplayText.call(self, data);\r\n                })\r\n                .textAnchor(\"middle\")\r\n                .verticalAlign(\"middle\")\r\n                .x(nodeTitleBoxPadding.left)\r\n                .y(nodeTitleBoxPadding.top)\r\n                .fontWeight(700)\r\n                .fontMin(6)\r\n                .fontMax(16)\r\n                .fontResize(true) // Resizes the text to fit the content\r\n                .width(nodeTitleBoxWidth - nodeTitleBoxPadding.left - nodeTitleBoxPadding.right)\r\n                .height(nodeTitleBoxHeight - nodeTitleBoxPadding.top - nodeTitleBoxPadding.bottom)\r\n                .render();\r\n        });\r\n        return self;\r\n    }\r\n\r\n    /** @inheritdoc */\r\n    _nodeUpdate(nodeUpdate, nodeUpdateTransition, nodes) {\r\n        // Transition to the proper position for the node\r\n\r\n        // Translating while inverting X/Y to\r\n        // make tree direction from left to right,\r\n        // instead of the typical top-to-down tree\r\n        if (this.getOrientation().toLowerCase() === 'toptobottom')\r\n        {\r\n            nodeUpdateTransition.attr(\"transform\", (data, index, arr) => \"translate(\" + data.x + \",\" + data.y + \")\");\r\n        }\r\n        else\r\n        {\r\n            nodeUpdateTransition.attr(\"transform\", (data, index, arr) => \"translate(\" + data.y + \",\" + data.x + \")\");\r\n        }\r\n\r\n        var nodeBodyBoxWidth = this.nodeSettings.getBodyBoxWidth();\r\n        var nodeBodyBoxHeight = this.nodeSettings.getBodyBoxHeight();\r\n\r\n        // Update the node attributes and style\r\n        nodeUpdate.select(\".node .body-group .body-box\")\r\n            .attr(\"y\", -(nodeBodyBoxHeight / 2))\r\n            .attr(\"width\", nodeBodyBoxWidth)\r\n            .attr(\"height\", nodeBodyBoxHeight);\r\n\r\n        nodeUpdate.select(\".d3plus-textBox\")\r\n            .style(\"fill-opacity\", 1);\r\n        return this;\r\n    }\r\n\r\n    /** @inheritdoc */\r\n    _nodeExit(nodeExit, nodeExitTransition, nodes) {\r\n        var nodeBodyBoxWidth = this.nodeSettings.getBodyBoxWidth();\r\n        var nodeBodyBoxHeight = this.nodeSettings.getBodyBoxHeight();\r\n\r\n        nodeExitTransition.attr(\"transform\", (data, index, arr) => {\r\n                var highestCollapsingParent = data.parent;\r\n                while (highestCollapsingParent.parent && !highestCollapsingParent.parent.children) {\r\n                    highestCollapsingParent = highestCollapsingParent.parent;\r\n                }\r\n\r\n                if (this.getOrientation().toLowerCase() === 'toptobottom')\r\n                {\r\n                    return \"translate(\" + (highestCollapsingParent.x + nodeBodyBoxWidth / 2) + \",\" + (highestCollapsingParent.y + nodeBodyBoxHeight) + \")\";\r\n                }\r\n                else\r\n                {\r\n                    // Translating while inverting X/Y to\r\n                    // make tree direction from left to right,\r\n                    // instead of the typical top-to-down tree\r\n                    return \"translate(\" + (highestCollapsingParent.y + nodeBodyBoxWidth) + \",\" + (highestCollapsingParent.x + nodeBodyBoxHeight / 2) + \")\";\r\n                }\r\n            })\r\n            .remove();\r\n\r\n        // On exit animate out\r\n        nodeExitTransition.select(\".node .body-group rect\")\r\n            .attr(\"width\", 1e-6)\r\n            .attr(\"height\", 1e-6);\r\n\r\n        nodeExitTransition.select(\".node .body-group .d3plus-textBox\")\r\n            .style(\"fill-opacity\", 1e-6)\r\n            .attr(\"transform\", (data, index, arr) => \"translate(0,\" + (-nodeBodyBoxHeight / 2) + \")\")\r\n            .selectAll(\"text\")\r\n                .style(\"font-size\", 0)\r\n                .attr(\"y\", 0)\r\n                .attr(\"x\", 0);\r\n\r\n        nodeExitTransition.select(\".node .title-group\")\r\n            .attr(\"transform\", \"translate(0, \" + (-nodeBodyBoxHeight / 2) + \")\");\r\n\r\n        nodeExitTransition.select(\".node .title-group rect\")\r\n            .attr(\"width\", 1e-6)\r\n            .attr(\"height\", 1e-6);\r\n\r\n        nodeExitTransition.select(\".node .title-group .d3plus-textBox\")\r\n            .style(\"fill-opacity\", 1e-6)\r\n            .attr(\"transform\", \"translate(0,0)\")\r\n            .selectAll(\"text\")\r\n                .style(\"font-size\", 0)\r\n                .attr(\"y\", 0)\r\n                .attr(\"x\", 0);\r\n\r\n        // On exit reduce the opacity of text labels\r\n        nodeExitTransition.select(\".d3plus-textBox\")\r\n            .style(\"fill-opacity\", 1e-6);\r\n        return this;\r\n    }\r\n\r\n    /** @inheritdoc */\r\n    _getNodeSize() {\r\n        return [\r\n            this.nodeSettings.getBodyBoxHeight() + this.nodeSettings.getVerticalSpacing(),\r\n            this.nodeSettings.getBodyBoxWidth() + this.nodeSettings.getHorizontalSpacing()\r\n        ];\r\n    }\r\n\r\n    /** @inheritdoc */\r\n    _linkEnter(source, linkEnter, links, linkPathGenerator)\t{\r\n        linkEnter.attr(\"d\", (data, index, arr) => {\r\n            var sourceCoordinate = {\r\n                x: source.x0,\r\n                y: source.y0\r\n            };\r\n\r\n            var coordinatesObject = {\r\n                source: sourceCoordinate,\r\n                target: sourceCoordinate\r\n            };\r\n            return linkPathGenerator(coordinatesObject);\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /** @inheritdoc */\r\n    _linkUpdate(source, linkUpdate, linkUpdateTransition, links, linkPathGenerator) {\r\n        linkUpdateTransition.attr(\"d\", (data, index, arr) => {\r\n            var sourceCoordinate = data;\r\n            var targetCoordinate = data.parent;\r\n\r\n            var coordinatesObject = {\r\n                source: sourceCoordinate,\r\n                target: targetCoordinate\r\n            };\r\n\r\n            return linkPathGenerator(coordinatesObject);\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /** @inheritdoc */\r\n    _linkExit(source, linkExit, linkExitTransition, links, linkPathGenerator) {\r\n        linkExitTransition.attr(\"d\", (data, index, arr) => {\r\n            var highestCollapsingParent = data.parent;\r\n            while (highestCollapsingParent.parent && !highestCollapsingParent.parent.children) {\r\n                highestCollapsingParent = highestCollapsingParent.parent;\r\n            }\r\n            \r\n            var sourceCoordinate = null;\r\n            if (this.getOrientation().toLowerCase() === 'toptobottom')\r\n            {\r\n                var nodeBodyBoxHeight = this.nodeSettings.getBodyBoxHeight();\r\n                sourceCoordinate = {\r\n                    x: highestCollapsingParent.x,\r\n                    y: highestCollapsingParent.y + nodeBodyBoxHeight\r\n                };\r\n            }\r\n            else\r\n            {\r\n                var nodeBodyBoxWidth = this.nodeSettings.getBodyBoxWidth();\r\n                sourceCoordinate = {\r\n                    x: highestCollapsingParent.x,\r\n                    y: highestCollapsingParent.y + nodeBodyBoxWidth\r\n                };\r\n            }\r\n\r\n            var targetCoordinate = {\r\n                x: highestCollapsingParent.x,\r\n                y: highestCollapsingParent.y\r\n            };\r\n\r\n            var coordinatesObject = {\r\n                source: sourceCoordinate,\r\n                target: targetCoordinate\r\n            };\r\n\r\n            return linkPathGenerator(coordinatesObject);\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /** @inheritdoc */\r\n    _getLinkPathGenerator() {\r\n        // Declare box dimensions\r\n        var nodeBodyBoxWidth = this.nodeSettings.getBodyBoxWidth();\r\n        var nodeBodyBoxHeight = this.nodeSettings.getBodyBoxHeight();\r\n\r\n        // We specify arrow functions that returns\r\n        // an array specifying how to get the\r\n        // the x/y cordinates from the object,\r\n        // in the format of [x, y], the default\r\n        // format for the link generator to\r\n        // generate the path\r\n        if (this.getOrientation().toLowerCase() === 'toptobottom')\r\n        {\r\n            return d3.linkVertical()\r\n                .source((data) => [data.source.x + nodeBodyBoxWidth / 2, data.source.y - nodeBodyBoxHeight / 2])\r\n                .target((data) => [data.target.x + nodeBodyBoxWidth / 2, data.target.y + nodeBodyBoxHeight / 2]);\r\n        }\r\n        else\r\n        {\r\n            return d3.linkHorizontal()\r\n                // Inverts the X/Y coordinates to draw links for a\r\n                // tree starting from left to right,\r\n                // instead of the typical top-to-down tree\r\n                .source((data) => [data.source.y, data.source.x])\r\n                .target((data) => [data.target.y + nodeBodyBoxWidth, data.target.x]);\r\n        }\r\n    }\r\n\r\n    /** @inheritdoc */\r\n    validateSettings() {\r\n        super.validateSettings();\r\n        if (!this._getBodyDisplayText)\r\n            throw \"Need to define the getBodyDisplayText function as part of the options\";\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the body display text accessor,\r\n     * used to get the body display text\r\n     * for the nodes.\r\n     * \r\n     * @param {bodyDisplayTextAccessorCallBack} newBodyDisplayTextAccessor \r\n     */\r\n    setBodyDisplayTextAccessor(newBodyDisplayTextAccessor) {\r\n        this._getBodyDisplayText = newBodyDisplayTextAccessor;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the body display text for a given data item.\r\n     * \r\n     * @param {object} nodeDataItem The data item to get the body display text from.\r\n     * @returns {string} The body display text to render for the node.\r\n     */\r\n    getBodyDisplayText(nodeDataItem) {\r\n        // Note that data in this context refers to D3 Tree data, not the original item data\r\n        // To Access the original item data, use the \".data\" property\r\n        return this._getBodyDisplayText(nodeDataItem.data);\r\n    }\r\n\r\n    /**\r\n     * Sets the title display text accessor,\r\n     * used to get the title display text\r\n     * for the nodes.\r\n     * \r\n     * @param {titleDisplayTextAccessorCallBack} newTitleDisplayTextAccessor \r\n     */\r\n    setTitleDisplayTextAccessor(newTitleDisplayTextAccessor) {\r\n        this._getTitleDisplayText = newTitleDisplayTextAccessor;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the title display text for a given data item.\r\n     * \r\n     * @param {object} nodeDataItem The D3 node data item to get the title display text from.\r\n     * @returns {string} The title display text to render for the node.\r\n     */\r\n    getTitleDisplayText(nodeDataItem) {\r\n        // Note that data in this context refers to D3 Tree data, not the original item data\r\n        // To Access the original item data, use the \".data\" property\r\n        return this._getTitleDisplayText(nodeDataItem.data);\r\n    }\r\n\r\n    /** @inheritdoc */\r\n    centerNode(nodeDataItem) {\r\n        var nodeBodyBoxWidth = this.nodeSettings.getBodyBoxWidth();\r\n        var nodeBodyBoxHeight = this.nodeSettings.getBodyBoxHeight();\r\n        if (this.getOrientation().toLowerCase() === 'toptobottom')\r\n        {\r\n            nodeDataItem.x0 = nodeDataItem.x0;\r\n            nodeDataItem.y0 = nodeDataItem.y0 + nodeBodyBoxHeight / 2;\r\n        }\r\n        else\r\n        {\r\n            nodeDataItem.y0 = nodeDataItem.y0 + nodeBodyBoxWidth / 2;\r\n            nodeDataItem.x0 = nodeDataItem.x0;\r\n        }\r\n        return super.centerNode(nodeDataItem);\r\n    }\r\n\r\n    /**\r\n     * Determines how to obtain the body text\r\n     * to display for a node corresponding\r\n     * to a data item.\r\n     * \r\n     * @callback bodyDisplayTextAccessorCallBack\r\n     * @param {object} data The data item to get the body display text from.\r\n     * @returns {string} The body display text to render for the node.\r\n     */\r\n\r\n    /**\r\n     * Determines how to obtain the title text\r\n     * to display for a node corresponding\r\n     * to a data item.\r\n     * \r\n     * @callback titleDisplayTextAccessorCallBack\r\n     * @param {object} data The data item to get the title display text from.\r\n     * @returns {string} The title display text to render for the node.\r\n     */\r\n}\r\n\r\nBoxedTree.defaults = {\r\n    getBodyDisplayText: null,\r\n    getTitleDisplayText: (dataItem) => {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default BoxedTree;",
    "static": true,
    "longname": "D:/Git Repositories/Packages/d3-mitch-tree/src/js/BoxedTree.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 210,
    "kind": "class",
    "name": "BoxedTree",
    "memberof": "js/BoxedTree.js",
    "static": true,
    "longname": "js/BoxedTree.js~BoxedTree",
    "access": "public",
    "export": true,
    "importPath": "d3-mitch-tree/js/BoxedTree.js",
    "importStyle": "BoxedTree",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "js/BaseTree.js~BaseTree"
    ]
  },
  {
    "__docId__": 211,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/BoxedTree.js~BoxedTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BoxedTree.js~BoxedTree#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options object."
      },
      {
        "nullable": null,
        "types": [
          "bodyDisplayTextAccessorCallBack"
        ],
        "spread": false,
        "optional": false,
        "name": "options.getBodyDisplayText",
        "description": "Determines how to obtain the body text to display for a node corresponding to a data item."
      },
      {
        "nullable": null,
        "types": [
          "titleDisplayTextAccessorCallBack"
        ],
        "spread": false,
        "optional": false,
        "name": "options.getTitleDisplayText",
        "description": "Determines how to obtain the title text to display for a node corresponding to a data item."
      }
    ]
  },
  {
    "__docId__": 212,
    "kind": "member",
    "name": "_getBodyDisplayText",
    "memberof": "js/BoxedTree.js~BoxedTree",
    "static": false,
    "longname": "js/BoxedTree.js~BoxedTree#_getBodyDisplayText",
    "access": "private",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "member",
    "name": "_getTitleDisplayText",
    "memberof": "js/BoxedTree.js~BoxedTree",
    "static": false,
    "longname": "js/BoxedTree.js~BoxedTree#_getTitleDisplayText",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 214,
    "kind": "member",
    "name": "nodeSettings",
    "memberof": "js/BoxedTree.js~BoxedTree",
    "static": false,
    "longname": "js/BoxedTree.js~BoxedTree#nodeSettings",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "initialize",
    "memberof": "js/BoxedTree.js~BoxedTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BoxedTree.js~BoxedTree#initialize",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "_nodeEnter",
    "memberof": "js/BoxedTree.js~BoxedTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BoxedTree.js~BoxedTree#_nodeEnter",
    "access": "private",
    "description": null,
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "nodeEnter",
        "types": [
          "*"
        ]
      },
      {
        "name": "nodes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "_nodeUpdate",
    "memberof": "js/BoxedTree.js~BoxedTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BoxedTree.js~BoxedTree#_nodeUpdate",
    "access": "private",
    "description": null,
    "lineNumber": 131,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "nodeUpdate",
        "types": [
          "*"
        ]
      },
      {
        "name": "nodeUpdateTransition",
        "types": [
          "*"
        ]
      },
      {
        "name": "nodes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "_nodeExit",
    "memberof": "js/BoxedTree.js~BoxedTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BoxedTree.js~BoxedTree#_nodeExit",
    "access": "private",
    "description": null,
    "lineNumber": 161,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "nodeExit",
        "types": [
          "*"
        ]
      },
      {
        "name": "nodeExitTransition",
        "types": [
          "*"
        ]
      },
      {
        "name": "nodes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "_getNodeSize",
    "memberof": "js/BoxedTree.js~BoxedTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BoxedTree.js~BoxedTree#_getNodeSize",
    "access": "private",
    "description": null,
    "lineNumber": 220,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "_linkEnter",
    "memberof": "js/BoxedTree.js~BoxedTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BoxedTree.js~BoxedTree#_linkEnter",
    "access": "private",
    "description": null,
    "lineNumber": 228,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "linkEnter",
        "types": [
          "*"
        ]
      },
      {
        "name": "links",
        "types": [
          "*"
        ]
      },
      {
        "name": "linkPathGenerator",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "_linkUpdate",
    "memberof": "js/BoxedTree.js~BoxedTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BoxedTree.js~BoxedTree#_linkUpdate",
    "access": "private",
    "description": null,
    "lineNumber": 245,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "linkUpdate",
        "types": [
          "*"
        ]
      },
      {
        "name": "linkUpdateTransition",
        "types": [
          "*"
        ]
      },
      {
        "name": "links",
        "types": [
          "*"
        ]
      },
      {
        "name": "linkPathGenerator",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "_linkExit",
    "memberof": "js/BoxedTree.js~BoxedTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BoxedTree.js~BoxedTree#_linkExit",
    "access": "private",
    "description": null,
    "lineNumber": 261,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "linkExit",
        "types": [
          "*"
        ]
      },
      {
        "name": "linkExitTransition",
        "types": [
          "*"
        ]
      },
      {
        "name": "links",
        "types": [
          "*"
        ]
      },
      {
        "name": "linkPathGenerator",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "_getLinkPathGenerator",
    "memberof": "js/BoxedTree.js~BoxedTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BoxedTree.js~BoxedTree#_getLinkPathGenerator",
    "access": "private",
    "description": null,
    "lineNumber": 302,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "validateSettings",
    "memberof": "js/BoxedTree.js~BoxedTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BoxedTree.js~BoxedTree#validateSettings",
    "access": "public",
    "description": null,
    "lineNumber": 331,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "setBodyDisplayTextAccessor",
    "memberof": "js/BoxedTree.js~BoxedTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BoxedTree.js~BoxedTree#setBodyDisplayTextAccessor",
    "access": "public",
    "description": "Sets the body display text accessor,\nused to get the body display text\nfor the nodes.",
    "lineNumber": 345,
    "params": [
      {
        "nullable": null,
        "types": [
          "bodyDisplayTextAccessorCallBack"
        ],
        "spread": false,
        "optional": false,
        "name": "newBodyDisplayTextAccessor",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "getBodyDisplayText",
    "memberof": "js/BoxedTree.js~BoxedTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BoxedTree.js~BoxedTree#getBodyDisplayText",
    "access": "public",
    "description": "Gets the body display text for a given data item.",
    "lineNumber": 356,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The body display text to render for the node."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeDataItem",
        "description": "The data item to get the body display text from."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The body display text to render for the node."
    }
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "setTitleDisplayTextAccessor",
    "memberof": "js/BoxedTree.js~BoxedTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BoxedTree.js~BoxedTree#setTitleDisplayTextAccessor",
    "access": "public",
    "description": "Sets the title display text accessor,\nused to get the title display text\nfor the nodes.",
    "lineNumber": 369,
    "params": [
      {
        "nullable": null,
        "types": [
          "titleDisplayTextAccessorCallBack"
        ],
        "spread": false,
        "optional": false,
        "name": "newTitleDisplayTextAccessor",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "getTitleDisplayText",
    "memberof": "js/BoxedTree.js~BoxedTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BoxedTree.js~BoxedTree#getTitleDisplayText",
    "access": "public",
    "description": "Gets the title display text for a given data item.",
    "lineNumber": 380,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The title display text to render for the node."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeDataItem",
        "description": "The D3 node data item to get the title display text from."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The title display text to render for the node."
    }
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "centerNode",
    "memberof": "js/BoxedTree.js~BoxedTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/BoxedTree.js~BoxedTree#centerNode",
    "access": "public",
    "description": null,
    "lineNumber": 387,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "nodeDataItem",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "file",
    "name": "js/CircleNodeSettings.js",
    "content": "import NodeSettings from './NodeSettings';\r\n\r\nclass CircleNodeSettings extends NodeSettings {\r\n}\r\n\r\nexport default CircleNodeSettings;",
    "static": true,
    "longname": "D:/Git Repositories/Packages/d3-mitch-tree/src/js/CircleNodeSettings.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 233,
    "kind": "class",
    "name": "CircleNodeSettings",
    "memberof": "js/CircleNodeSettings.js",
    "static": true,
    "longname": "js/CircleNodeSettings.js~CircleNodeSettings",
    "access": "public",
    "export": true,
    "importPath": "d3-mitch-tree/js/CircleNodeSettings.js",
    "importStyle": "CircleNodeSettings",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "js/NodeSettings.js~NodeSettings"
    ]
  },
  {
    "__docId__": 234,
    "kind": "file",
    "name": "js/CircleTree.js",
    "content": "import d3 from './CustomD3';\r\nimport BaseTree from './BaseTree';\r\nimport CircleNodeSettings from './CircleNodeSettings';\r\n\r\nclass CircleTree extends BaseTree{\r\n    /**\r\n     * @param {object} [options] The options object.\r\n     * @param {displayTextAccessorCallBack} [options.getDisplayText] Determines how to obtain the text to display for a node corresponding to a data item.\r\n     */\r\n    constructor(options) {\r\n        super(options);\r\n        var mergedOptions = {\r\n            ...BaseTree.defaults,\r\n            ...CircleTree.defaults,\r\n            ...options\r\n        };\r\n\r\n        this._getDisplayText = mergedOptions.getDisplayText;\r\n        this.nodeSettings = new CircleNodeSettings(this, mergedOptions.nodeSettings);\r\n    }\r\n\r\n    /** @inheritdoc */\r\n    initialize() {\r\n        // Create the svg, and set its dimensions\r\n        super.initialize();\r\n        this.getSvg().classed('circle-tree', true);\r\n        return this;\r\n    }\r\n\r\n    /** @inheritdoc */\r\n    _nodeEnter(nodeEnter, nodes) {\r\n        // Add Circle for the nodes\r\n        nodeEnter.append(\"circle\")\r\n            .attr(\"r\", 1e-6);\r\n\r\n        // Add labels for the nodes\r\n        nodeEnter.append(\"text\")\r\n            .text((data, index, arr) => this.getDisplayText.call(this, data));\r\n        return this;\r\n    }\r\n\r\n    /** @inheritdoc */\r\n    _nodeUpdate(nodeUpdate, nodeUpdateTransition, nodes) {\r\n        nodeUpdate.classed('middle', (data, index, arr) => {\r\n            var isMiddleChild = false;\r\n            if (data.parent && data.parent.children.length % 2 !== 0) {\r\n                var siblings = data.parent.children;\r\n                var indexOfSiblings = siblings.indexOf(data);\r\n                if (indexOfSiblings === Math.floor(siblings.length / 2))\r\n                    isMiddleChild = true;\r\n            }\r\n            return isMiddleChild;\r\n        });\r\n\r\n        // Transition to the proper position for the node\r\n\r\n        // Translating while inverting X/Y to\r\n        // make tree direction from left to right,\r\n        // instead of the typical top-to-down tree\r\n        if (this.getOrientation().toLowerCase() === 'toptobottom')\r\n        {\r\n            nodeUpdateTransition.attr(\"transform\", (data, index, arr) => \"translate(\" + data.x + \",\" + data.y + \")\");\r\n        }\r\n        else\r\n        {\r\n            nodeUpdateTransition.attr(\"transform\", (data, index, arr) => \"translate(\" + data.y + \",\" + data.x + \")\");\r\n        }\r\n\r\n        nodeUpdate.select(\"text\")\r\n            .style(\"fill-opacity\", 1);\r\n        return this;\r\n    }\r\n\r\n    /** @inheritdoc */\r\n    _nodeExit(nodeExit, nodeExitTransition, nodes) {\r\n        // Remove any exiting nodes\r\n        nodeExitTransition.attr(\"transform\", (data, index, arr) => {\r\n            var highestCollapsingParent = data.parent;\r\n            while (highestCollapsingParent.parent && !highestCollapsingParent.parent.children) {\r\n                highestCollapsingParent = highestCollapsingParent.parent;\r\n            }\r\n\r\n            // Translating while inverting X/Y to\r\n            // make tree direction from left to right,\r\n            // instead of the typical top-to-down tree\r\n            if (this.getOrientation().toLowerCase() === 'toptobottom')\r\n            {\r\n                return \"translate(\" + highestCollapsingParent.x + \",\" + highestCollapsingParent.y + \")\";\r\n            }\r\n            else\r\n            {\r\n                return \"translate(\" + highestCollapsingParent.y + \",\" + highestCollapsingParent.x + \")\";\r\n            }\r\n        })\r\n        .remove();\r\n\r\n        // On exit reduce the node circles size to 0\r\n        nodeExitTransition.select(\"circle\")\r\n            .attr(\"r\", 1e-6);\r\n\r\n        // On exit reduce the opacity of text labels\r\n        nodeExitTransition.select(\"text\")\r\n            .style(\"fill-opacity\", 1e-6);\r\n        return this;\r\n    }\r\n\r\n    /** @inheritdoc */\r\n    _getNodeSize() {\r\n        return [\r\n            this.nodeSettings.getVerticalSpacing(),\r\n            this.nodeSettings.getHorizontalSpacing()\r\n        ];\r\n    }\r\n\r\n    /** @inheritdoc */\r\n    _linkEnter(source, linkEnter, links, linkPathGenerator)\t{\r\n        linkEnter.attr(\"d\", (data, index, arr) => {\r\n            var sourceCoordinate = {\r\n                x: source.x0,\r\n                y: source.y0\r\n            };\r\n\r\n            var coordinatesObject = {\r\n                source: sourceCoordinate,\r\n                target: sourceCoordinate\r\n            };\r\n\r\n            return linkPathGenerator(coordinatesObject);\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /** @inheritdoc */\r\n    _linkUpdate(source, linkUpdate, linkUpdateTransition, links, linkPathGenerator) {\r\n        linkUpdateTransition.attr(\"d\", (data, index, arr) => {\r\n            var sourceCoordinate = data;\r\n            var targetCoordinate = data.parent;\r\n\r\n            var coordinatesObject = {\r\n                source: sourceCoordinate,\r\n                target: targetCoordinate\r\n            };\r\n\r\n            return linkPathGenerator(coordinatesObject);\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /** @inheritdoc */\r\n    _linkExit(source, linkExit, linkExitTransition, links, linkPathGenerator) {\r\n        linkExitTransition.attr(\"d\", (data, index, arr) => {\r\n            var highestCollapsingParent = data.parent;\r\n            while (highestCollapsingParent.parent && !highestCollapsingParent.parent.children) {\r\n                highestCollapsingParent = highestCollapsingParent.parent;\r\n            }\r\n            var sourceCoordinate = {\r\n                x: highestCollapsingParent.x,\r\n                y: highestCollapsingParent.y\r\n            };\r\n\r\n            var targetCoordinate = {\r\n                x: highestCollapsingParent.x,\r\n                y: highestCollapsingParent.y\r\n            };\r\n\r\n            var coordinatesObject = {\r\n                source: sourceCoordinate,\r\n                target: targetCoordinate\r\n            };\r\n\r\n            return linkPathGenerator(coordinatesObject);\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    /** @inheritdoc */\r\n    _getLinkPathGenerator() {\r\n        // We specify arrow functions that returns\r\n        // an array specifying how to get the\r\n        // the x/y cordinates from the object,\r\n        // in the format of [x, y], the default\r\n        // format for the link generator to\r\n        // generate the path\r\n        if (this.getOrientation().toLowerCase() === 'toptobottom')\r\n        {\r\n            return d3.linkVertical()\r\n                .source((data) => [data.source.x, data.source.y])\r\n                .target((data) => [data.target.x, data.target.y]);\r\n        }\r\n        else\r\n        {\r\n            return d3.linkHorizontal()\r\n                // Inverts the X/Y coordinates to draw links for a\r\n                // tree starting from left to right,\r\n                // instead of the typical top-to-down tree\r\n                .source((data) => [data.source.y, data.source.x])\r\n                .target((data) => [data.target.y, data.target.x]);\r\n        }\r\n    }\r\n\r\n    /** @inheritdoc */\r\n    validateSettings() {\r\n        super.validateSettings();\r\n        if (!this.getDisplayText)\r\n            throw \"Need to define the getDisplayText function as part of the options\";\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the display text accessor,\r\n     * used to get the display text\r\n     * for the nodes.\r\n     * \r\n     * @param {displayTextAccessorCallBack} newDisplayTextAccessor \r\n     */\r\n    setDisplayTextAccessor(newDisplayTextAccessor) {\r\n        this._getDisplayText = newDisplayTextAccessor;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the display text for a given data item.\r\n     * \r\n     * @param {object} nodeDataItem The data item to get the display text from.\r\n     * @returns {string} The display text to render for the node.\r\n     */\r\n    getDisplayText(nodeDataItem) {\r\n        // Note that data in this context refers to D3 Tree data, not the original item data\r\n        // To Access the original item data, use the \".data\" property\r\n        return this._getDisplayText(nodeDataItem.data);\r\n    }\r\n\r\n    /**\r\n     * Determines how to obtain the text\r\n     * to display for a node corresponding\r\n     * to a data item.\r\n     * \r\n     * @callback displayTextAccessorCallBack\r\n     * @param {object} data The data item to get the display text from.\r\n     * @returns {string} The display text to render for the node.\r\n     */\r\n}\r\n\r\nCircleTree.defaults = {\r\n    getDisplayText: (nodeDataItem) => null\r\n}\r\n\r\nexport default CircleTree;",
    "static": true,
    "longname": "D:/Git Repositories/Packages/d3-mitch-tree/src/js/CircleTree.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 235,
    "kind": "class",
    "name": "CircleTree",
    "memberof": "js/CircleTree.js",
    "static": true,
    "longname": "js/CircleTree.js~CircleTree",
    "access": "public",
    "export": true,
    "importPath": "d3-mitch-tree/js/CircleTree.js",
    "importStyle": "CircleTree",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "js/BaseTree.js~BaseTree"
    ]
  },
  {
    "__docId__": 236,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/CircleTree.js~CircleTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/CircleTree.js~CircleTree#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The options object."
      },
      {
        "nullable": null,
        "types": [
          "displayTextAccessorCallBack"
        ],
        "spread": false,
        "optional": true,
        "name": "options.getDisplayText",
        "description": "Determines how to obtain the text to display for a node corresponding to a data item."
      }
    ]
  },
  {
    "__docId__": 237,
    "kind": "member",
    "name": "_getDisplayText",
    "memberof": "js/CircleTree.js~CircleTree",
    "static": false,
    "longname": "js/CircleTree.js~CircleTree#_getDisplayText",
    "access": "private",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "member",
    "name": "nodeSettings",
    "memberof": "js/CircleTree.js~CircleTree",
    "static": false,
    "longname": "js/CircleTree.js~CircleTree#nodeSettings",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "initialize",
    "memberof": "js/CircleTree.js~CircleTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/CircleTree.js~CircleTree#initialize",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "_nodeEnter",
    "memberof": "js/CircleTree.js~CircleTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/CircleTree.js~CircleTree#_nodeEnter",
    "access": "private",
    "description": null,
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "nodeEnter",
        "types": [
          "*"
        ]
      },
      {
        "name": "nodes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "_nodeUpdate",
    "memberof": "js/CircleTree.js~CircleTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/CircleTree.js~CircleTree#_nodeUpdate",
    "access": "private",
    "description": null,
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "nodeUpdate",
        "types": [
          "*"
        ]
      },
      {
        "name": "nodeUpdateTransition",
        "types": [
          "*"
        ]
      },
      {
        "name": "nodes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "_nodeExit",
    "memberof": "js/CircleTree.js~CircleTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/CircleTree.js~CircleTree#_nodeExit",
    "access": "private",
    "description": null,
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "nodeExit",
        "types": [
          "*"
        ]
      },
      {
        "name": "nodeExitTransition",
        "types": [
          "*"
        ]
      },
      {
        "name": "nodes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "_getNodeSize",
    "memberof": "js/CircleTree.js~CircleTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/CircleTree.js~CircleTree#_getNodeSize",
    "access": "private",
    "description": null,
    "lineNumber": 108,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "_linkEnter",
    "memberof": "js/CircleTree.js~CircleTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/CircleTree.js~CircleTree#_linkEnter",
    "access": "private",
    "description": null,
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "linkEnter",
        "types": [
          "*"
        ]
      },
      {
        "name": "links",
        "types": [
          "*"
        ]
      },
      {
        "name": "linkPathGenerator",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "_linkUpdate",
    "memberof": "js/CircleTree.js~CircleTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/CircleTree.js~CircleTree#_linkUpdate",
    "access": "private",
    "description": null,
    "lineNumber": 134,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "linkUpdate",
        "types": [
          "*"
        ]
      },
      {
        "name": "linkUpdateTransition",
        "types": [
          "*"
        ]
      },
      {
        "name": "links",
        "types": [
          "*"
        ]
      },
      {
        "name": "linkPathGenerator",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "_linkExit",
    "memberof": "js/CircleTree.js~CircleTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/CircleTree.js~CircleTree#_linkExit",
    "access": "private",
    "description": null,
    "lineNumber": 150,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "linkExit",
        "types": [
          "*"
        ]
      },
      {
        "name": "linkExitTransition",
        "types": [
          "*"
        ]
      },
      {
        "name": "links",
        "types": [
          "*"
        ]
      },
      {
        "name": "linkPathGenerator",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "_getLinkPathGenerator",
    "memberof": "js/CircleTree.js~CircleTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/CircleTree.js~CircleTree#_getLinkPathGenerator",
    "access": "private",
    "description": null,
    "lineNumber": 178,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "validateSettings",
    "memberof": "js/CircleTree.js~CircleTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/CircleTree.js~CircleTree#validateSettings",
    "access": "public",
    "description": null,
    "lineNumber": 203,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "setDisplayTextAccessor",
    "memberof": "js/CircleTree.js~CircleTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/CircleTree.js~CircleTree#setDisplayTextAccessor",
    "access": "public",
    "description": "Sets the display text accessor,\nused to get the display text\nfor the nodes.",
    "lineNumber": 217,
    "params": [
      {
        "nullable": null,
        "types": [
          "displayTextAccessorCallBack"
        ],
        "spread": false,
        "optional": false,
        "name": "newDisplayTextAccessor",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "getDisplayText",
    "memberof": "js/CircleTree.js~CircleTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/CircleTree.js~CircleTree#getDisplayText",
    "access": "public",
    "description": "Gets the display text for a given data item.",
    "lineNumber": 228,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The display text to render for the node."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeDataItem",
        "description": "The data item to get the display text from."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The display text to render for the node."
    }
  },
  {
    "__docId__": 252,
    "kind": "file",
    "name": "js/CustomD3.js",
    "content": "/**\r\n * We only import the necessary modules\r\n * from D3, to keep resulting bundded\r\n * JS files minimal in size.\r\n */\r\n\r\nimport { select, selectAll, event } from 'd3-selection'\r\nimport * as hierarchy from 'd3-hierarchy'\r\nimport * as zoom from 'd3-zoom'\r\nimport { linkHorizontal, linkVertical } from 'd3-shape'\r\n\r\n// create a Object with only the subset of functions/submodules/plugins that we need\r\nvar d3 = {\r\n  select,\r\n  selectAll,\r\n  // For more information on live bindings, refer to:\r\n  //   https://stackoverflow.com/questions/40012016/importing-d3-event-into-a-custom-build-using-rollup\r\n  get event() { return event; },\r\n  linkHorizontal,\r\n  linkVertical,\r\n  ...hierarchy,\r\n  ...zoom,\r\n};\r\n\r\nexport default d3;",
    "static": true,
    "longname": "D:/Git Repositories/Packages/d3-mitch-tree/src/js/CustomD3.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 253,
    "kind": "variable",
    "name": "d3",
    "memberof": "js/CustomD3.js",
    "static": true,
    "longname": "js/CustomD3.js~d3",
    "access": "public",
    "export": true,
    "importPath": "d3-mitch-tree/js/CustomD3.js",
    "importStyle": "d3",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "{\"select\": *, \"selectAll\": *, \"event\": function, \"linkHorizontal\": *, \"linkVertical\": *, ...hierarchy: Object, ...zoom: Object}"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "file",
    "name": "js/LoadOnDemandSettings.js",
    "content": "class LoadOnDemandSettings {\r\n    /**\r\n     * \r\n     * @param {object} ownerObject The owner object.\r\n     * @param {object} options The options object.\r\n     * @param {hasChildrenCallBack} options.hasChildren Sets the hasChildren callback function, used to determine whether a node or data item has children or not.\r\n     * @param {loadChildrenCallBack} options.loadChildren the loadChildren callback function, used to load children data items for a node.\r\n     */\r\n    constructor(ownerObject, options) {\r\n        // Define option defaults\r\n        var mergedOptions = {\r\n            ...LoadOnDemandSettings.defaults,\r\n            ...options\r\n        };\r\n\r\n        this._ownerObject = ownerObject;\r\n        this._hasChildren = mergedOptions.hasChildren;\r\n        this._loadChildren = mergedOptions.loadChildren;\r\n    }\r\n\r\n    /**\r\n     * Gets the owner object.\r\n     * \r\n     * @returns {object} The owner object.\r\n     */\r\n    back() {\r\n        return this._ownerObject;\r\n    }\r\n\r\n    /**\r\n     * Validates whether the provided\r\n     * settings are correct or not.\r\n     * \r\n     * @returns {object} The tree object.\r\n     */\r\n    validateSettings() {\r\n        if (!this.hasChildren && this.loadChildren)\r\n            throw \"With load on demand enabled, you need to define hasChildren as part of the options\";\r\n        if (!this.loadChildren && this.hasChildren)\r\n            throw \"With load on demand enabled, you need to define loadChildren as part of the options\";\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Load the children for a given data object.\r\n     * \r\n     * @param {*} data The data item, which should be used to load the children of the data item via AJAX.\r\n     * @param {*} processData Callback function to process the children data items.\r\n     * @returns {*}\r\n     */\r\n    loadChildren(data, processData){\r\n        return this._loadChildren.call(this._ownerObject, data, processData);\r\n    }\r\n\r\n    /**\r\n     * Returns a boolean indicating whether\r\n     * the passed data item has children.\r\n     * \r\n     * @param {object} dataItem The data item to check if it has children or not.\r\n     * @returns {boolean} Whether the data item has children or not.\r\n     */\r\n    hasChildren(dataItem){\r\n        return this._hasChildren.call(this._ownerObject, dataItem);\r\n    }\r\n\r\n    /**\r\n     * Sets the loadChildren callback function,\r\n     * used to load children data items for\r\n     * a node.\r\n     * \r\n     * @param {loadChildrenCallBack} newLoadChildrenMethod\r\n     * @returns {object} The tree object.\r\n     */\r\n    setLoadChildrenMethod(newLoadChildrenMethod){\r\n        this._loadChildren = newLoadChildrenMethod;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the hasChildren callback function,\r\n     * used to determine whether a node\r\n     * or data item has children or not.\r\n     * \r\n     * @param {hasChildrenCallBack} newHasChildrenMethod\r\n     * @returns {object} The tree object.\r\n     */\r\n    setHasChildrenMethod(newHasChildrenMethod){\r\n        this._hasChildren = newHasChildrenMethod;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a boolean indicating whether\r\n     * load-on-demand is enabled or not.\r\n     * \r\n     * @returns {boolean} Whether load-on-demand is enabled or not.\r\n     */\r\n    isEnabled() {\r\n        return this._hasChildren || this._loadChildren;\r\n    }\r\n\r\n    /**\r\n     * Determines whether a node data item\r\n     * has children or not.\r\n     * \r\n     * @callback hasChildrenCallBack\r\n     * @param {object} dataItem Can be used to to load the childrens from the server via AJAX.\r\n     * @returns {boolean} True if the node or data item has children to load via AJAX, false otherwise.\r\n     */\r\n\r\n    /**\r\n     * Load the children items for a given\r\n     * node data item.\r\n     * @callback loadChildrenCallBack\r\n     * @param {object} nodeDataItem Node data item, which can be used to to load the childrens from the server via AJAX.\r\n     * @param {object} nodeDataItem.data The data item, which can be used to to load the childrens from the server via AJAX.\r\n     * @param {childrenDataProcessorCallBack} processData Data processor callback function which you should use to call, passing in the children data that's been loaded via AJAX.\r\n     * @returns {undefined}\r\n     */\r\n\r\n    /**\r\n     * Processes the children items.\r\n     * @callback childrenDataProcessorCallBack\r\n     * @param {object[]} childrenDataItems The array of children data for the node being processed.\r\n     * @returns {undefined}\r\n     */\r\n}\r\n\r\nLoadOnDemandSettings.defaults = {\r\n    // Takes in a function that accepts a parameter:\r\n    // - The node and data item which can be used\r\n    //   to load the childrens from server\r\n    // Returns true or false\r\n    hasChildren: null,\r\n    // Takes in a function that accepts two parameters:\r\n    // - The node and data item which can be used\r\n    //   to load the childrens from server\r\n    // - the data processor function, which\r\n    //   you should call, passing in the\r\n    //   children data you loaded with\r\n    //   your server AJAX request\r\n    loadChildren: null,\r\n}\r\n\r\nexport default LoadOnDemandSettings;",
    "static": true,
    "longname": "D:/Git Repositories/Packages/d3-mitch-tree/src/js/LoadOnDemandSettings.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 255,
    "kind": "class",
    "name": "LoadOnDemandSettings",
    "memberof": "js/LoadOnDemandSettings.js",
    "static": true,
    "longname": "js/LoadOnDemandSettings.js~LoadOnDemandSettings",
    "access": "public",
    "export": true,
    "importPath": "d3-mitch-tree/js/LoadOnDemandSettings.js",
    "importStyle": "LoadOnDemandSettings",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 256,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/LoadOnDemandSettings.js~LoadOnDemandSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/LoadOnDemandSettings.js~LoadOnDemandSettings#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "ownerObject",
        "description": "The owner object."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options object."
      },
      {
        "nullable": null,
        "types": [
          "hasChildrenCallBack"
        ],
        "spread": false,
        "optional": false,
        "name": "options.hasChildren",
        "description": "Sets the hasChildren callback function, used to determine whether a node or data item has children or not."
      },
      {
        "nullable": null,
        "types": [
          "loadChildrenCallBack"
        ],
        "spread": false,
        "optional": false,
        "name": "options.loadChildren",
        "description": "the loadChildren callback function, used to load children data items for a node."
      }
    ]
  },
  {
    "__docId__": 257,
    "kind": "member",
    "name": "_ownerObject",
    "memberof": "js/LoadOnDemandSettings.js~LoadOnDemandSettings",
    "static": false,
    "longname": "js/LoadOnDemandSettings.js~LoadOnDemandSettings#_ownerObject",
    "access": "private",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 258,
    "kind": "member",
    "name": "_hasChildren",
    "memberof": "js/LoadOnDemandSettings.js~LoadOnDemandSettings",
    "static": false,
    "longname": "js/LoadOnDemandSettings.js~LoadOnDemandSettings#_hasChildren",
    "access": "private",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 259,
    "kind": "member",
    "name": "_loadChildren",
    "memberof": "js/LoadOnDemandSettings.js~LoadOnDemandSettings",
    "static": false,
    "longname": "js/LoadOnDemandSettings.js~LoadOnDemandSettings#_loadChildren",
    "access": "private",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "back",
    "memberof": "js/LoadOnDemandSettings.js~LoadOnDemandSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/LoadOnDemandSettings.js~LoadOnDemandSettings#back",
    "access": "public",
    "description": "Gets the owner object.",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The owner object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The owner object."
    },
    "params": []
  },
  {
    "__docId__": 261,
    "kind": "method",
    "name": "validateSettings",
    "memberof": "js/LoadOnDemandSettings.js~LoadOnDemandSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/LoadOnDemandSettings.js~LoadOnDemandSettings#validateSettings",
    "access": "public",
    "description": "Validates whether the provided\nsettings are correct or not.",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    },
    "params": []
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "loadChildren",
    "memberof": "js/LoadOnDemandSettings.js~LoadOnDemandSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/LoadOnDemandSettings.js~LoadOnDemandSettings#loadChildren",
    "access": "public",
    "description": "Load the children for a given data object.",
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The data item, which should be used to load the children of the data item via AJAX."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "processData",
        "description": "Callback function to process the children data items."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 263,
    "kind": "method",
    "name": "hasChildren",
    "memberof": "js/LoadOnDemandSettings.js~LoadOnDemandSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/LoadOnDemandSettings.js~LoadOnDemandSettings#hasChildren",
    "access": "public",
    "description": "Returns a boolean indicating whether\nthe passed data item has children.",
    "lineNumber": 62,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Whether the data item has children or not."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "dataItem",
        "description": "The data item to check if it has children or not."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether the data item has children or not."
    }
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "setLoadChildrenMethod",
    "memberof": "js/LoadOnDemandSettings.js~LoadOnDemandSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/LoadOnDemandSettings.js~LoadOnDemandSettings#setLoadChildrenMethod",
    "access": "public",
    "description": "Sets the loadChildren callback function,\nused to load children data items for\na node.",
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "loadChildrenCallBack"
        ],
        "spread": false,
        "optional": false,
        "name": "newLoadChildrenMethod",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "setHasChildrenMethod",
    "memberof": "js/LoadOnDemandSettings.js~LoadOnDemandSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/LoadOnDemandSettings.js~LoadOnDemandSettings#setHasChildrenMethod",
    "access": "public",
    "description": "Sets the hasChildren callback function,\nused to determine whether a node\nor data item has children or not.",
    "lineNumber": 87,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The tree object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "hasChildrenCallBack"
        ],
        "spread": false,
        "optional": false,
        "name": "newHasChildrenMethod",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The tree object."
    }
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "isEnabled",
    "memberof": "js/LoadOnDemandSettings.js~LoadOnDemandSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/LoadOnDemandSettings.js~LoadOnDemandSettings#isEnabled",
    "access": "public",
    "description": "Returns a boolean indicating whether\nload-on-demand is enabled or not.",
    "lineNumber": 98,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Whether load-on-demand is enabled or not."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether load-on-demand is enabled or not."
    },
    "params": []
  },
  {
    "__docId__": 269,
    "kind": "file",
    "name": "js/NodeSettings.js",
    "content": "class NodeSettings {\r\n    /**\r\n     * @param {object} ownerObject The owner object\r\n     * @param {object} options The options for the node settings.\r\n     * @param {('nodeSize'|'size')} [options.sizingMode=size] The sizing mode. Should be either 'nodeSize' to automatically size the SVG based on the nodes, or 'size' to use the configured width and height.\r\n     * @param {number} [options.horizontalSpacing=25] The horizontal spacing value.\r\n     * @param {number} [options.verticalSpacing=25] The vertical spacing value.\r\n     */\r\n    constructor(ownerObject, options) {\r\n        var mergedOptions = {\r\n            ...NodeSettings.defaults,\r\n            ...options\r\n        };\r\n\r\n        this._ownerObject = ownerObject;\r\n        this._sizingMode = mergedOptions.sizingMode;\r\n        this._horizontalSpacing = mergedOptions.horizontalSpacing;\r\n        this._verticalSpacing = mergedOptions.verticalSpacing;\r\n    }\r\n\r\n    /**\r\n     * Gets the owner object.\r\n     * \r\n     * @returns {object} The owner object.\r\n     */\r\n    back() {\r\n        return this._ownerObject;\r\n    }\r\n\r\n    /**\r\n     * Gets the horizontal spacing value.\r\n     * \r\n     * @returns {number} The horizontal spacing value.\r\n     */\r\n    getHorizontalSpacing() {\r\n        return this._horizontalSpacing;\r\n    }\r\n\r\n    /**\r\n     * Sets the horizontal spacing value.\r\n     * \r\n     * @param {number} newHorizontalSpacing The new horizontal spacing value.\r\n     * @returns {object} The node settings object.\r\n     */\r\n    setHorizontalSpacing(newHorizontalSpacing) {\r\n        this._horizontalSpacing = newHorizontalSpacing;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the vertical spacing value.\r\n     * \r\n     * @returns {number} The vertical spacing value.\r\n     */\r\n    getVerticalSpacing() {\r\n        return this._verticalSpacing;\r\n    }\r\n\r\n    /**\r\n     * Sets the vertical spacing value.\r\n     * \r\n     * @param {number} newVerticalSpacing The new vertical spacing value.\r\n     * @returns {object} The node settings object.\r\n     */\r\n    setVerticalSpacing(newVerticalSpacing) {\r\n        this._verticalSpacing = newVerticalSpacing;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the sizing mode.\r\n     * \r\n     * @returns {string} The configured node sizing mode.\r\n     */\r\n    getSizingMode() {\r\n        return this._sizingMode;\r\n    }\r\n\r\n    /**\r\n     * Sets the sizing mode.\r\n     * \r\n     * @param {('nodeSize'|'size')} newSizingMode The sizing mode. Should be either 'nodeSize' to automatically size the SVG based on the nodes, or 'size' to use the configured width and height.\r\n     * @returns {object} The node settings object.\r\n     */\r\n    setSizingMode(newSizingMode) {\r\n        this._sizingMode = newSizingMode;\r\n        return this;\r\n    }\r\n}\r\n\r\nNodeSettings.defaults = {\r\n    sizingMode: \"size\", // set to 'nodeSize' for the tree size to automatically be based on the node dimensions itself.\r\n    horizontalSpacing: 25,\r\n    verticalSpacing: 25\r\n}\r\n\r\nexport default NodeSettings;",
    "static": true,
    "longname": "D:/Git Repositories/Packages/d3-mitch-tree/src/js/NodeSettings.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 270,
    "kind": "class",
    "name": "NodeSettings",
    "memberof": "js/NodeSettings.js",
    "static": true,
    "longname": "js/NodeSettings.js~NodeSettings",
    "access": "public",
    "export": true,
    "importPath": "d3-mitch-tree/js/NodeSettings.js",
    "importStyle": "NodeSettings",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 271,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/NodeSettings.js~NodeSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/NodeSettings.js~NodeSettings#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "ownerObject",
        "description": "The owner object"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options for the node settings."
      },
      {
        "nullable": null,
        "types": [
          "'nodeSize'",
          "'size'"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "size",
        "defaultRaw": "size",
        "name": "options.sizingMode",
        "description": "The sizing mode. Should be either 'nodeSize' to automatically size the SVG based on the nodes, or 'size' to use the configured width and height."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "25",
        "defaultRaw": 25,
        "name": "options.horizontalSpacing",
        "description": "The horizontal spacing value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "25",
        "defaultRaw": 25,
        "name": "options.verticalSpacing",
        "description": "The vertical spacing value."
      }
    ]
  },
  {
    "__docId__": 272,
    "kind": "member",
    "name": "_ownerObject",
    "memberof": "js/NodeSettings.js~NodeSettings",
    "static": false,
    "longname": "js/NodeSettings.js~NodeSettings#_ownerObject",
    "access": "private",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 273,
    "kind": "member",
    "name": "_sizingMode",
    "memberof": "js/NodeSettings.js~NodeSettings",
    "static": false,
    "longname": "js/NodeSettings.js~NodeSettings#_sizingMode",
    "access": "private",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 274,
    "kind": "member",
    "name": "_horizontalSpacing",
    "memberof": "js/NodeSettings.js~NodeSettings",
    "static": false,
    "longname": "js/NodeSettings.js~NodeSettings#_horizontalSpacing",
    "access": "private",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 275,
    "kind": "member",
    "name": "_verticalSpacing",
    "memberof": "js/NodeSettings.js~NodeSettings",
    "static": false,
    "longname": "js/NodeSettings.js~NodeSettings#_verticalSpacing",
    "access": "private",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "back",
    "memberof": "js/NodeSettings.js~NodeSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/NodeSettings.js~NodeSettings#back",
    "access": "public",
    "description": "Gets the owner object.",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The owner object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The owner object."
    },
    "params": []
  },
  {
    "__docId__": 277,
    "kind": "method",
    "name": "getHorizontalSpacing",
    "memberof": "js/NodeSettings.js~NodeSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/NodeSettings.js~NodeSettings#getHorizontalSpacing",
    "access": "public",
    "description": "Gets the horizontal spacing value.",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The horizontal spacing value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The horizontal spacing value."
    },
    "params": []
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "setHorizontalSpacing",
    "memberof": "js/NodeSettings.js~NodeSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/NodeSettings.js~NodeSettings#setHorizontalSpacing",
    "access": "public",
    "description": "Sets the horizontal spacing value.",
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The node settings object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "newHorizontalSpacing",
        "description": "The new horizontal spacing value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The node settings object."
    }
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "getVerticalSpacing",
    "memberof": "js/NodeSettings.js~NodeSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/NodeSettings.js~NodeSettings#getVerticalSpacing",
    "access": "public",
    "description": "Gets the vertical spacing value.",
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The vertical spacing value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The vertical spacing value."
    },
    "params": []
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "setVerticalSpacing",
    "memberof": "js/NodeSettings.js~NodeSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/NodeSettings.js~NodeSettings#setVerticalSpacing",
    "access": "public",
    "description": "Sets the vertical spacing value.",
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The node settings object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "newVerticalSpacing",
        "description": "The new vertical spacing value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The node settings object."
    }
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "getSizingMode",
    "memberof": "js/NodeSettings.js~NodeSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/NodeSettings.js~NodeSettings#getSizingMode",
    "access": "public",
    "description": "Gets the sizing mode.",
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The configured node sizing mode."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The configured node sizing mode."
    },
    "params": []
  },
  {
    "__docId__": 284,
    "kind": "method",
    "name": "setSizingMode",
    "memberof": "js/NodeSettings.js~NodeSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/NodeSettings.js~NodeSettings#setSizingMode",
    "access": "public",
    "description": "Sets the sizing mode.",
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The node settings object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "'nodeSize'",
          "'size'"
        ],
        "spread": false,
        "optional": false,
        "name": "newSizingMode",
        "description": "The sizing mode. Should be either 'nodeSize' to automatically size the SVG based on the nodes, or 'size' to use the configured width and height."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The node settings object."
    }
  },
  {
    "kind": "index",
    "content": "[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![made-with-esdocs](https://img.shields.io/badge/Made%20with-ESDocs-green.svg)](https://esdoc.org/)\n\n![D3 MitchTree Demo](manual/asset/D3MitchTree&#32;Demo.gif)\n\n# Introduction\n\nA D3 plugin which lets you create a stunning interactive hierarchical tree visualisation with a flat/nested dataset. It has various features which makes it suitable for traversing large data sets.\n\n# Features\n\n* Zoom and Panning\n* Automatically pan to the clicked node\n* Hide irrelevant nodes while traversing the tree\n* Supports AJAX load-on-demand\n* Supports theming (via CSS)\n\n# Documentation\n\nThe project documentation can be found in the repo's [GitHub pages](https://deltoss.github.io/d3-mitch-tree/)\n\n# License\n\nMIT © Michael Tran",
    "longname": "D:\\Git Repositories\\Packages\\d3-mitch-tree\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"d3-mitch-tree\",\n  \"version\": \"1.0.2\",\n  \"description\": \"D3 plugin to create interactive navigatable hierarchical tree diagrams.\",\n  \"main\": \"./lib/d3-mitch-tree.js\",\n  \"scripts\": {\n    \"build-dev\": \"npm-run-all \\\"build-sass\\\" \\\"build-webpack-dev\\\" \\\"build-docs\\\"\",\n    \"build-prd\": \"npm-run-all \\\"build-sass\\\" \\\"build-webpack-prd\\\" \\\"build-docs\\\"\",\n    \"watch\": \"npm-run-all --parallel \\\"watch-sass\\\" \\\"watch-webpack\\\" \\\"watch-docs\\\"\",\n    \"build-sass\": \"node ./build/build-sass.js\",\n    \"watch-sass\": \"nodemon --watch ./src/sass --ext * --exec \\\"npm run build-sass\\\"\",\n    \"build-webpack-dev\": \"webpack --config webpack.config.js --mode=development\",\n    \"build-webpack-prd\": \"webpack --config webpack.config.js --mode=production\",\n    \"watch-webpack\": \"npm run build-webpack-dev -- --watch\",\n    \"build-docs\": \"esdoc -c esdoc.json\",\n    \"watch-docs\": \"nodemon --watch ./src/js --watch ./manual --watch ./README.md --ext * --exec \\\"npm run build-docs\\\"\"\n  },\n  \"keywords\": [\n    \"d3\",\n    \"d3-module\",\n    \"javascript\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/deltoss/d3-mitch-tree.git\"\n  },\n  \"author\": \"Michael Tran <MTran0011@outlook.com>\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/deltoss/d3-mitch-tree/issues\"\n  },\n  \"homepage\": \"https://deltoss.github.io/d3-mitch-tree/\",\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.2.2\",\n    \"@babel/preset-env\": \"^7.2.3\",\n    \"babel-loader\": \"^8.0.4\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-publish-markdown-plugin\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"mkdirp\": \"^0.5.1\",\n    \"node-sass\": \"^4.11.0\",\n    \"nodemon\": \"^1.18.9\",\n    \"npm-run-all\": \"^4.1.5\",\n    \"webpack\": \"^4.28.2\",\n    \"webpack-cli\": \"^3.1.2\"\n  },\n  \"dependencies\": {\n    \"d3-hierarchy\": \"^1.1.8\",\n    \"d3-selection\": \"^1.4.0\",\n    \"d3-shape\": \"^1.3.3\",\n    \"d3-zoom\": \"^1.7.3\",\n    \"d3plus-text\": \"^0.9.33\"\n  }\n}\n",
    "longname": "D:\\Git Repositories\\Packages\\d3-mitch-tree\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": true,
    "content": "[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![made-with-esdocs](https://img.shields.io/badge/Made%20with-ESDocs-green.svg)](https://esdoc.org/)\n\n![D3MitchTree Demo](manual/asset/D3MitchTree&#32;Demo.gif)\n\n# Introduction\n\nA D3 plugin which lets you create a stunning interactive hierarchical tree visualisation with a flat/nested dataset. It has various features which makes it suitable for traversing large data sets.\n\n# Features\n\n* Zoom and Panning\n* Automatically pan to the clicked node\n* Hide irrelevant nodes while traversing the tree\n* Supports AJAX load-on-demand\n* Supports theming (via CSS)\n\n# Examples\n\nHTML examples are included as part of the project as within the `examples` folder. Simply clone or download the repository and open up those files with your browser to see D3MitchTree in action.\n\n# License\n\nMIT © Michael Tran",
    "longname": "D:\\Git Repositories\\Packages\\d3-mitch-tree\\manual\\index.md",
    "name": "./manual/index.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualAsset",
    "longname": "D:\\Git Repositories\\Packages\\d3-mitch-tree\\manual\\asset",
    "name": "manual/asset/",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "D:\\Git Repositories\\Packages\\d3-mitch-tree\\manual\\installation.md",
    "name": "./manual/installation.md",
    "content": "# Installation\r\n\r\n## With Browser\r\n\r\nNote that you don't actually need `D3` itself to start using this library. You can use this library with or without `D3`.\r\n\r\n### Local Files\r\n\r\n1. Clone or download this git repository, and move the contents of the `dist` folder to your project. For example, you can put it in `/scripts/d3-mitch-tree` inside your project.\r\n\r\n2. Import the D3MitchTree files as below, changing the path depending on where you copied it into for your project\r\n   ```html\r\n   <script src=\"/scripts/d3-mitch-tree/js/d3-mitch-tree.min.js\"></script>\r\n   <link rel=\"stylesheet\" type=\"text/css\" href=\"/scripts/d3-mitch-tree/css/d3-mitch-tree.min.css\">\r\n   <link rel=\"stylesheet\" type=\"text/css\" href=\"/scripts/d3-mitch-tree/css/d3-mitch-tree-default.min.css\">\r\n   ```\r\n\r\n### CDN\r\n\r\nYou can alternatively use CDN so you don't have to download and set up the files:\r\n```html\r\n<script src=\"https://cdn.jsdelivr.net/gh/deltoss/d3-mitch-tree@1.0.2/dist/js/d3-mitch-tree.min.js\"></script>\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/gh/deltoss/d3-mitch-tree@1.0.2/dist/css/d3-mitch-tree.min.css\">\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/gh/deltoss/d3-mitch-tree@1.0.2/dist/css/d3-mitch-tree-default.min.css\">\r\n```\r\n\r\n## With NPM\r\n\r\nD3MitchTree is available on npm. You can perform the following steps to get it set up.\r\n\r\n1. Open up your terminal, and run the below command from your project directory:\r\n   ```bash\r\n   npm install d3-mitch-tree --save\r\n   ```\r\n\r\n2. Now you can use CommonJS, AMD, or ES6 to import the plugin. For example:\r\n   ```JavaScript\r\n   var mitchTree = require('d3-mitch-tree');\r\n   ```",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "D:\\Git Repositories\\Packages\\d3-mitch-tree\\manual\\usage.md",
    "name": "./manual/usage.md",
    "content": "# Usage\r\n\r\nFirst, you should create a basic HTML page with the D3 MitchTree plugin set up.\r\nYou also need to create the `visualisation` element which we can use to\r\ninitialise to be a tree. It could look something like the below:\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n    <head>\r\n        <meta charset=\"utf-8\">\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n        <title></title>\r\n        <script src=\"https://cdn.jsdelivr.net/gh/deltoss/d3-mitch-tree@1.0.2/dist/js/d3-mitch-tree.min.js\"></script>\r\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/gh/deltoss/d3-mitch-tree@1.0.2/dist/css/d3-mitch-tree.min.css\">\r\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/gh/deltoss/d3-mitch-tree@1.0.2/dist/css/d3-mitch-tree-default.min.css\">\r\n    </head>\r\n    <body>\r\n        <section id=\"visualisation\">\r\n        </section>\r\n        \r\n        <script>\r\n            // ToDo...\r\n        </script>\r\n    </body>\r\n</html>\r\n```\r\n\r\nNow we can initialise and adjust the visualisation through different ways by adding the script in.\r\nNotice the `ToDo` placeholder is where we'll add our additional scripts.\r\n\r\n## Basic Usage with Nested Data\r\n\r\nWe need to add scripts to initialise the `visualisation` element to be a tree.\r\nLet's set up our data. For getting quickly set up, we'll just use hard-coded dummy data.\r\n\r\n```javascript\r\nvar data = {\r\n    \"id\": 1,\r\n    \"name\": \"Animals\",\r\n    \"type\": \"Root\",\r\n    \"description\": \"A living organism that feeds on organic matter\",\r\n    \"children\": [\r\n        {\r\n            \"id\": 2,\r\n            \"name\": \"Carnivores\",\r\n            \"type\": \"Type\",\r\n            \"description\": \"Diet consists solely of animal materials\",\r\n            \"children\": [\r\n                {\r\n                    \"id\": 3,\r\n                    \"name\": \"Javanese Cat\",\r\n                    \"type\": \"Organism\",\r\n                    \"description\": \"Domestic breed of cats, of oriental origin\",\r\n                    \"children\": []\r\n                },\r\n                {\r\n                    \"id\": 4,\r\n                    \"name\": \"Polar Bear\",\r\n                    \"type\": \"Organism\",\r\n                    \"description\": \"White bear native to the Arctic Circle\",\r\n                    \"children\": []\r\n                },\r\n                {\r\n                    \"id\": 5,\r\n                    \"name\": \"Panda Bear\",\r\n                    \"type\": \"Organism\",\r\n                    \"description\": \"Spotted bear native to South Central China\",\r\n                    \"children\": []\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"id\": 6,\r\n            \"name\": \"Herbivores\",\r\n            \"type\": \"Type\",\r\n            \"description\": \"Diet consists solely of plant matter\",\r\n            \"children\": [\r\n                {\r\n                    \"id\": 7,\r\n                    \"name\": \"Angus Cattle\",\r\n                    \"type\": \"Organism\",\r\n                    \"description\": \"Scottish breed of black cattle\",\r\n                    \"children\": []\r\n                },\r\n                {\r\n                    \"id\": 8,\r\n                    \"name\": \"Barb Horse\",\r\n                    \"type\": \"Organism\",\r\n                    \"description\": \"A breed of Northern African horses with high stamina and hardiness. Their generally hot temperament makes it harder to tame.\",\r\n                    \"children\": []\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n};\r\n```\r\n\r\nFinally, we use the plugin by initialising it with options and the constructed dataset.\r\n\r\n```javascript\r\nvar treePlugin = new d3.mitchTree.boxedTree()\r\n    .setData(data)\r\n    .setElement(document.getElementById(\"visualisation\"))\r\n    .setIdAccessor(function(data) {\r\n        return data.id;\r\n    })\r\n    .setChildrenAccessor(function(data) {\r\n        return data.children;\r\n    })\r\n    .setBodyDisplayTextAccessor(function(data) {\r\n        return data.description;\r\n    })\r\n    .setTitleDisplayTextAccessor(function(data) {\r\n        return data.name;\r\n    })\r\n    .initialize();\r\n```\r\n\r\nThe final code would look like this:\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n    <head>\r\n        <meta charset=\"utf-8\">\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n        <title></title>\r\n        <script src=\"https://cdn.jsdelivr.net/gh/deltoss/d3-mitch-tree@1.0.2/dist/js/d3-mitch-tree.min.js\"></script>\r\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/gh/deltoss/d3-mitch-tree@1.0.2/dist/css/d3-mitch-tree.min.css\">\r\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/gh/deltoss/d3-mitch-tree@1.0.2/dist/css/d3-mitch-tree-theme-default.min.css\">\r\n    </head>\r\n    <body>\r\n        <section id=\"visualisation\">\r\n        </section>\r\n        \r\n        <script>\r\n            var data = {\r\n                \"id\": 1,\r\n                \"name\": \"Animals\",\r\n                \"type\": \"Root\",\r\n                \"description\": \"A living organism that feeds on organic matter\",\r\n                \"children\": [\r\n                    {\r\n                        \"id\": 2,\r\n                        \"name\": \"Carnivores\",\r\n                        \"type\": \"Type\",\r\n                        \"description\": \"Diet consists solely of animal materials\",\r\n                        \"children\": [\r\n                            {\r\n                                \"id\": 3,\r\n                                \"name\": \"Javanese Cat\",\r\n                                \"type\": \"Organism\",\r\n                                \"description\": \"Domestic breed of cats, of oriental origin\",\r\n                                \"children\": []\r\n                            },\r\n                            {\r\n                                \"id\": 4,\r\n                                \"name\": \"Polar Bear\",\r\n                                \"type\": \"Organism\",\r\n                                \"description\": \"White bear native to the Arctic Circle\",\r\n                                \"children\": []\r\n                            },\r\n                            {\r\n                                \"id\": 5,\r\n                                \"name\": \"Panda Bear\",\r\n                                \"type\": \"Organism\",\r\n                                \"description\": \"Spotted bear native to South Central China\",\r\n                                \"children\": []\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        \"id\": 6,\r\n                        \"name\": \"Herbivores\",\r\n                        \"type\": \"Type\",\r\n                        \"description\": \"Diet consists solely of plant matter\",\r\n                        \"children\": [\r\n                            {\r\n                                \"id\": 7,\r\n                                \"name\": \"Angus Cattle\",\r\n                                \"type\": \"Organism\",\r\n                                \"description\": \"Scottish breed of black cattle\",\r\n                                \"children\": []\r\n                            },\r\n                            {\r\n                                \"id\": 8,\r\n                                \"name\": \"Barb Horse\",\r\n                                \"type\": \"Organism\",\r\n                                \"description\": \"A breed of Northern African horses with high stamina and hardiness. Their generally hot temperament makes it harder to tame.\",\r\n                                \"children\": []\r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            };\r\n\r\n            var treePlugin = new d3.mitchTree.boxedTree()\r\n                .setData(data)\r\n                .setElement(document.getElementById(\"visualisation\"))\r\n                .setIdAccessor(function(data) {\r\n                    return data.id;\r\n                })\r\n                .setChildrenAccessor(function(data) {\r\n                    return data.children;\r\n                })\r\n                .setBodyDisplayTextAccessor(function(data) {\r\n                    return data.description;\r\n                })\r\n                .setTitleDisplayTextAccessor(function(data) {\r\n                    return data.name;\r\n                })\r\n                .initialize();\r\n        </script>\r\n    </body>\r\n</html>\r\n```\r\n\r\n## Basic Usage with Flat Data\r\n\r\nWe need to add scripts to initialise the `visualisation` element to be a tree.\r\nLet's set up our data. For getting quickly set up, we'll just use hard-coded dummy data.\r\n\r\n```javascript\r\nvar data = [\r\n    {\r\n        \"id\": 1,\r\n        \"name\": \"Animals\",\r\n        \"type\": \"Root\",\r\n        \"description\": \"A living organism that feeds on organic matter\"\r\n    },\r\n    {\r\n        \"id\": 2,\r\n        \"parentId\": 1,\r\n        \"name\": \"Carnivores\",\r\n        \"type\": \"Type\",\r\n        \"description\": \"Diet consists solely of animal materials\"\r\n    },\r\n    {\r\n        \"id\": 3,\r\n        \"parentId\": 2,\r\n        \"name\": \"Javanese Cat\",\r\n        \"type\": \"Organism\",\r\n        \"description\": \"Domestic breed of cats, of oriental origin\"\r\n    },\r\n    {\r\n        \"id\": 4,\r\n        \"parentId\": 2,\r\n        \"name\": \"Polar Bear\",\r\n        \"type\": \"Organism\",\r\n        \"description\": \"White bear native to the Arctic Circle\"\r\n    },\r\n    {\r\n        \"id\": 5,\r\n        \"parentId\": 2,\r\n        \"name\": \"Panda Bear\",\r\n        \"type\": \"Organism\",\r\n        \"description\": \"Spotted bear native to South Central China\"\r\n    },\r\n    {\r\n        \"id\": 6,\r\n        \"parentId\": 1,\r\n        \"name\": \"Herbivores\",\r\n        \"type\": \"Type\",\r\n        \"description\": \"Diet consists solely of plant matter\"\r\n    },\r\n    {\r\n        \"id\": 7,\r\n        \"parentId\": 6,\r\n        \"name\": \"Angus Cattle\",\r\n        \"type\": \"Organism\",\r\n        \"description\": \"Scottish breed of black cattle\"\r\n    },\r\n    {\r\n        \"id\": 8,\r\n        \"parentId\": 6,\r\n        \"name\": \"Barb Horse\",\r\n        \"type\": \"Organism\",\r\n        \"description\": \"A breed of Northern African horses with high stamina and hardiness. Their generally hot temperament makes it harder to tame.\"\r\n    }\r\n];\r\n```\r\n\r\nUse the plugin by initialising it with options and the constructed dataset.\r\n\r\n```javascript\r\nvar treePlugin = new d3.mitchTree.boxedTree()\r\n    .setIsFlatData(true)\r\n    .setData(data)\r\n    .setElement(document.getElementById(\"visualisation\"))\r\n    .setIdAccessor(function(data) {\r\n        return data.id;\r\n    })\r\n    .setParentIdAccessor(function(data) {\r\n        return data.parentId;\r\n    })\r\n    .setBodyDisplayTextAccessor(function(data) {\r\n        return data.description;\r\n    })\r\n    .setTitleDisplayTextAccessor(function(data) {\r\n        return data.name;\r\n    })\r\n    .initialize();\r\n```\r\n\r\nThe final code would look like this:\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n    <head>\r\n        <meta charset=\"utf-8\">\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n        <title></title>\r\n        <script src=\"https://cdn.jsdelivr.net/gh/deltoss/d3-mitch-tree@1.0.2/dist/js/d3-mitch-tree.min.js\"></script>\r\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/gh/deltoss/d3-mitch-tree@1.0.2/dist/css/d3-mitch-tree.min.css\">\r\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/gh/deltoss/d3-mitch-tree@1.0.2/dist/css/d3-mitch-tree-theme-default.min.css\">\r\n    </head>\r\n    <body>\r\n        <section id=\"visualisation\">\r\n        </section>\r\n        \r\n        <script>\r\n            var data = [\r\n                {\r\n                    \"id\": 1,\r\n                    \"name\": \"Animals\",\r\n                    \"type\": \"Root\",\r\n                    \"description\": \"A living organism that feeds on organic matter\"\r\n                },\r\n                {\r\n                    \"id\": 2,\r\n                    \"parentId\": 1,\r\n                    \"name\": \"Carnivores\",\r\n                    \"type\": \"Type\",\r\n                    \"description\": \"Diet consists solely of animal materials\"\r\n                },\r\n                {\r\n                    \"id\": 3,\r\n                    \"parentId\": 2,\r\n                    \"name\": \"Javanese Cat\",\r\n                    \"type\": \"Organism\",\r\n                    \"description\": \"Domestic breed of cats, of oriental origin\"\r\n                },\r\n                {\r\n                    \"id\": 4,\r\n                    \"parentId\": 2,\r\n                    \"name\": \"Polar Bear\",\r\n                    \"type\": \"Organism\",\r\n                    \"description\": \"White bear native to the Arctic Circle\"\r\n                },\r\n                {\r\n                    \"id\": 5,\r\n                    \"parentId\": 2,\r\n                    \"name\": \"Panda Bear\",\r\n                    \"type\": \"Organism\",\r\n                    \"description\": \"Spotted bear native to South Central China\"\r\n                },\r\n                {\r\n                    \"id\": 6,\r\n                    \"parentId\": 1,\r\n                    \"name\": \"Herbivores\",\r\n                    \"type\": \"Type\",\r\n                    \"description\": \"Diet consists solely of plant matter\"\r\n                },\r\n                {\r\n                    \"id\": 7,\r\n                    \"parentId\": 6,\r\n                    \"name\": \"Angus Cattle\",\r\n                    \"type\": \"Organism\",\r\n                    \"description\": \"Scottish breed of black cattle\"\r\n                },\r\n                {\r\n                    \"id\": 8,\r\n                    \"parentId\": 6,\r\n                    \"name\": \"Barb Horse\",\r\n                    \"type\": \"Organism\",\r\n                    \"description\": \"A breed of Northern African horses with high stamina and hardiness. Their generally hot temperament makes it harder to tame.\"\r\n                }\r\n            ];\r\n\r\n            var treePlugin = new d3.mitchTree.boxedTree()\r\n                .setIsFlatData(true)\r\n                .setData(data)\r\n                .setElement(document.getElementById(\"visualisation\"))\r\n                .setIdAccessor(function(data) {\r\n                    return data.id;\r\n                })\r\n                .setParentIdAccessor(function(data) {\r\n                    return data.parentId;\r\n                })\r\n                .setBodyDisplayTextAccessor(function(data) {\r\n                    return data.description;\r\n                })\r\n                .setTitleDisplayTextAccessor(function(data) {\r\n                    return data.name;\r\n                })\r\n                .initialize();\r\n        </script>\r\n    </body>\r\n</html>\r\n```\r\n\r\n## Additional Information\r\n\r\nFor more information on the usage:\r\n* Open up and view the example HTML files inside the repo's [examples folder](https://github.com/deltoss/d3-mitch-tree/tree/master/examples).\r\n* Clone/download the repo and run the HTML files inside the `examples` folder.\r\n* Refer to the API documentations.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "D:\\Git Repositories\\Packages\\d3-mitch-tree\\manual\\api.md",
    "name": "./manual/api.md",
    "content": "# API\r\n\r\nThe package can be configured using either the `method chaining` syntax, or the `options object` syntax.\r\n\r\n## Method Chaining\r\n\r\n```javascript\r\nvar treePlugin = new d3.mitchTree.boxedTree()\r\n    .setData(data)\r\n    .setElement(document.getElementById(\"visualisation\"))\r\n    .setIdAccessor(function(data) {\r\n        return data.id;\r\n    })\r\n    .setChildrenAccessor(function(data) {\r\n        return data.children;\r\n    })\r\n    .setBodyDisplayTextAccessor(function(data) {\r\n        return data.description;\r\n    })\r\n    .setTitleDisplayTextAccessor(function(data) {\r\n        return data.name;\r\n    })\r\n    .initialize();\r\n```\r\n\r\n## Options Object\r\n\r\n```javascript\r\nvar options = {\r\n    data: data,\r\n    element: document.getElementById(\"visualisation\"),\r\n    getId: function (data) {\r\n        return data.id;\r\n    },\r\n    getChildren: function (data) {\r\n        return data.children;\r\n    },\r\n    getBodyDisplayText: function (data) {\r\n        return data.description;\r\n    },\r\n    getTitleDisplayText: function (data) {\r\n        return data.name;\r\n    }\r\n};\r\nvar treePlugin = new d3.mitchTree.boxedTree(options).initialize();\r\n```\r\n\r\n## Additional Information\r\n\r\nFor more information on the available `options` and/or `methods`:\r\n* Clone/download the repo and run the HTML files inside the `examples` folder.\r\n* Refer to the API documentations, particularly the constructors.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "D:\\Git Repositories\\Packages\\d3-mitch-tree\\manual\\development.md",
    "name": "./manual/development.md",
    "content": "# Development\r\n\r\n## Major Dependencies\r\n* [D3.js](https://d3js.org/) 5.0.0+\r\n  * Used to build the main bulk of the visualisation\r\n* [D3Plus Textbox](https://github.com/d3plus/d3plus-text) 0.9.0+\r\n  * Truncates text to fit to a node\r\n  * Vertical alignment of texts\r\n  * Title tooltips on hover\r\n\r\nNote these dependencies does not need to be imported by the user in the front end. This is only needed when building the project, or when using module loaders such as `CommonJS`, `AMD`, etc.\r\n\r\n## Technologies Used\r\n\r\nThis package was created using:\r\n* `webpack` as the bundler\r\n* `npm` scripts to run common tasks (e.g. build and sass compilation), instead of gulp, grunt\r\n* `babel` with webpack to transpile JavaScript from ES6 to ES5, so this package codebase can utilise the newest ES6 features\r\n* `esdoc` to build the API documentations.\r\n\r\n## Available NPM Commands\r\n- `npm run build-docs` - Build the HTML documentations using ESDoc.\r\n- `npm run build-dev` - Build code with development settings.\r\n- `npm run build-prd` - Build code with production settings.\r\n- `npm run watch` - Build code and docs with development settings anytime when a change has been detected.",
    "static": true,
    "access": "public"
  }
]